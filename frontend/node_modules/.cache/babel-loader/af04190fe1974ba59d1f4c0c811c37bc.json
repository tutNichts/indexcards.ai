{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, createForOfIteratorHelperLoose as _createForOfIteratorHelperLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useMemo, useContext, useCallback, createContext, useRef, useState } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { isFocusableElement, getFocusableElements, focusIn, Focus, FocusResult, FocusableMode } from '../../utils/focus-management.esm.js';\nimport { useWindowEvent } from '../../hooks/use-window-event.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\nvar _reducers;\nvar PopoverStates;\n(function (PopoverStates) {\n  PopoverStates[PopoverStates[\"Open\"] = 0] = \"Open\";\n  PopoverStates[PopoverStates[\"Closed\"] = 1] = \"Closed\";\n})(PopoverStates || (PopoverStates = {}));\nvar ActionTypes;\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"TogglePopover\"] = 0] = \"TogglePopover\";\n  ActionTypes[ActionTypes[\"ClosePopover\"] = 1] = \"ClosePopover\";\n  ActionTypes[ActionTypes[\"SetButton\"] = 2] = \"SetButton\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 3] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanel\"] = 4] = \"SetPanel\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 5] = \"SetPanelId\";\n})(ActionTypes || (ActionTypes = {}));\nvar reducers = (_reducers = {}, _reducers[ActionTypes.TogglePopover] = function (state) {\n  var _match;\n  return _extends({}, state, {\n    popoverState: match(state.popoverState, (_match = {}, _match[PopoverStates.Open] = PopoverStates.Closed, _match[PopoverStates.Closed] = PopoverStates.Open, _match))\n  });\n}, _reducers[ActionTypes.ClosePopover] = function (state) {\n  if (state.popoverState === PopoverStates.Closed) return state;\n  return _extends({}, state, {\n    popoverState: PopoverStates.Closed\n  });\n}, _reducers[ActionTypes.SetButton] = function (state, action) {\n  if (state.button === action.button) return state;\n  return _extends({}, state, {\n    button: action.button\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanel] = function (state, action) {\n  if (state.panel === action.panel) return state;\n  return _extends({}, state, {\n    panel: action.panel\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar PopoverContext = /*#__PURE__*/createContext(null);\nPopoverContext.displayName = 'PopoverContext';\nfunction usePopoverContext(component) {\n  var context = useContext(PopoverContext);\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext);\n    throw err;\n  }\n  return context;\n}\nvar PopoverAPIContext = /*#__PURE__*/createContext(null);\nPopoverAPIContext.displayName = 'PopoverAPIContext';\nfunction usePopoverAPIContext(component) {\n  var context = useContext(PopoverAPIContext);\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Popover.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext);\n    throw err;\n  }\n  return context;\n}\nvar PopoverGroupContext = /*#__PURE__*/createContext(null);\nPopoverGroupContext.displayName = 'PopoverGroupContext';\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext);\n}\nvar PopoverPanelContext = /*#__PURE__*/createContext(null);\nPopoverPanelContext.displayName = 'PopoverPanelContext';\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext);\n}\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\nvar DEFAULT_POPOVER_TAG = 'div';\nfunction Popover(props) {\n  var _match2;\n  var buttonId = \"headlessui-popover-button-\" + useId();\n  var panelId = \"headlessui-popover-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId: buttonId,\n    panel: null,\n    panelId: panelId\n  });\n  var _reducerBag$ = reducerBag[0],\n    popoverState = _reducerBag$.popoverState,\n    button = _reducerBag$.button,\n    panel = _reducerBag$.panel,\n    dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var registerBag = useMemo(function () {\n    return {\n      buttonId: buttonId,\n      panelId: panelId,\n      close: function close() {\n        return dispatch({\n          type: ActionTypes.ClosePopover\n        });\n      }\n    };\n  }, [buttonId, panelId, dispatch]);\n  var groupContext = usePopoverGroupContext();\n  var registerPopover = groupContext == null ? void 0 : groupContext.registerPopover;\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupContext$isFocus;\n    return (_groupContext$isFocus = groupContext == null ? void 0 : groupContext.isFocusWithinPopoverGroup()) != null ? _groupContext$isFocus : (button == null ? void 0 : button.contains(document.activeElement)) || (panel == null ? void 0 : panel.contains(document.activeElement));\n  }, [groupContext, button, panel]);\n  useEffect(function () {\n    return registerPopover == null ? void 0 : registerPopover(registerBag);\n  }, [registerPopover, registerBag]); // Handle focus out\n\n  useWindowEvent('focus', function () {\n    if (popoverState !== PopoverStates.Open) return;\n    if (isFocusWithinPopoverGroup()) return;\n    if (!button) return;\n    if (!panel) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true); // Handle outside click\n\n  useWindowEvent('mousedown', function (event) {\n    var target = event.target;\n    if (popoverState !== PopoverStates.Open) return;\n    if (button == null ? void 0 : button.contains(target)) return;\n    if (panel == null ? void 0 : panel.contains(target)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault();\n      button == null ? void 0 : button.focus();\n    }\n  });\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n    var restoreElement = function () {\n      if (!focusableElement) return button;\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return button;\n    }();\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, button]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [popoverState, close]);\n  return React.createElement(PopoverContext.Provider, {\n    value: reducerBag\n  }, React.createElement(PopoverAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(popoverState, (_match2 = {}, _match2[PopoverStates.Open] = State.Open, _match2[PopoverStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: props,\n    slot: slot,\n    defaultTag: DEFAULT_POPOVER_TAG,\n    name: 'Popover'\n  }))));\n} // ---\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _usePopoverContext = usePopoverContext([Popover.name, Button.name].join('.')),\n    state = _usePopoverContext[0],\n    dispatch = _usePopoverContext[1];\n  var internalButtonRef = useRef(null);\n  var groupContext = usePopoverGroupContext();\n  var closeOthers = groupContext == null ? void 0 : groupContext.closeOthers;\n  var panelContext = usePopoverPanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var buttonRef = useSyncRefs(internalButtonRef, ref, isWithinPanel ? null : function (button) {\n    return dispatch({\n      type: ActionTypes.SetButton,\n      button: button\n    });\n  });\n  var withinPanelButtonRef = useSyncRefs(internalButtonRef, ref); // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n  var activeElementRef = useRef(null);\n  var previousActiveElementRef = useRef(typeof window === 'undefined' ? null : document.activeElement);\n  useWindowEvent('focus', function () {\n    previousActiveElementRef.current = activeElementRef.current;\n    activeElementRef.current = document.activeElement;\n  }, true);\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button;\n    if (isWithinPanel) {\n      if (state.popoverState === PopoverStates.Closed) return;\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          (_state$button = state.button) == null ? void 0 : _state$button.focus(); // Re-focus the original opening Button\n\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault(); // Prevent triggering a *click* event\n\n          event.stopPropagation();\n          if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          dispatch({\n            type: ActionTypes.TogglePopover\n          });\n          break;\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return closeOthers == null ? void 0 : closeOthers(state.buttonId);\n          if (!internalButtonRef.current) return;\n          if (!internalButtonRef.current.contains(document.activeElement)) return;\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ClosePopover\n          });\n          break;\n        case Keys.Tab:\n          if (state.popoverState !== PopoverStates.Open) return;\n          if (!state.panel) return;\n          if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n          if (event.shiftKey) {\n            var _state$button2;\n\n            // Check if the last focused element exists, and check that it is not inside button or panel itself\n            if (!previousActiveElementRef.current) return;\n            if ((_state$button2 = state.button) == null ? void 0 : _state$button2.contains(previousActiveElementRef.current)) return;\n            if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n            var focusableElements = getFocusableElements();\n            var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n            var buttonIdx = focusableElements.indexOf(state.button);\n            if (buttonIdx > previousIdx) return;\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.Last);\n          } else {\n            event.preventDefault();\n            event.stopPropagation();\n            focusIn(state.panel, Focus.First);\n          }\n          break;\n      }\n    }\n  }, [dispatch, state.popoverState, state.buttonId, state.button, state.panel, internalButtonRef, closeOthers, isWithinPanel]);\n  var handleKeyUp = useCallback(function (event) {\n    var _state$button3;\n    if (isWithinPanel) return;\n    if (event.key === Keys.Space) {\n      // Required for firefox, event.preventDefault() in handleKeyDown for\n      // the Space key doesn't cancel the handleKeyUp, which in turn\n      // triggers a *click*.\n      event.preventDefault();\n    }\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!state.panel) return;\n    if (!state.button) return; // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n\n    switch (event.key) {\n      case Keys.Tab:\n        // Check if the last focused element exists, and check that it is not inside button or panel itself\n        if (!previousActiveElementRef.current) return;\n        if ((_state$button3 = state.button) == null ? void 0 : _state$button3.contains(previousActiveElementRef.current)) return;\n        if (state.panel.contains(previousActiveElementRef.current)) return; // Check if the last focused element is *after* the button in the DOM\n\n        var focusableElements = getFocusableElements();\n        var previousIdx = focusableElements.indexOf(previousActiveElementRef.current);\n        var buttonIdx = focusableElements.indexOf(state.button);\n        if (buttonIdx > previousIdx) return;\n        event.preventDefault();\n        event.stopPropagation();\n        focusIn(state.panel, Focus.Last);\n        break;\n    }\n  }, [state.popoverState, state.panel, state.button, isWithinPanel]);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n    if (isWithinPanel) {\n      var _state$button4;\n      dispatch({\n        type: ActionTypes.ClosePopover\n      });\n      (_state$button4 = state.button) == null ? void 0 : _state$button4.focus(); // Re-focus the original opening Button\n    } else {\n      var _state$button5;\n      if (state.popoverState === PopoverStates.Closed) closeOthers == null ? void 0 : closeOthers(state.buttonId);\n      (_state$button5 = state.button) == null ? void 0 : _state$button5.focus();\n      dispatch({\n        type: ActionTypes.TogglePopover\n      });\n    }\n  }, [dispatch, state.button, state.popoverState, state.buttonId, props.disabled, closeOthers, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open\n    };\n  }, [state]);\n  var type = useResolveButtonType(props, internalButtonRef);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    ref: withinPanelButtonRef,\n    type: type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: type,\n    'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n    'aria-controls': state.panel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button'\n  });\n}); // ---\n\nvar DEFAULT_OVERLAY_TAG = 'div';\nvar OverlayRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Overlay = /*#__PURE__*/forwardRefWithAs(function Overlay(props, ref) {\n  var _usePopoverContext2 = usePopoverContext([Popover.name, Overlay.name].join('.')),\n    popoverState = _usePopoverContext2[0].popoverState,\n    dispatch = _usePopoverContext2[1];\n  var overlayRef = useSyncRefs(ref);\n  var id = \"headlessui-popover-overlay-\" + useId();\n  var usesOpenClosedState = useOpenClosed();\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n    return popoverState === PopoverStates.Open;\n  }();\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault();\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, [dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: popoverState === PopoverStates.Open\n    };\n  }, [popoverState]);\n  var propsWeControl = {\n    ref: overlayRef,\n    id: id,\n    'aria-hidden': true,\n    onClick: handleClick\n  };\n  var passthroughProps = props;\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible: visible,\n    name: 'Popover.Overlay'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _props$focus = props.focus,\n    focus = _props$focus === void 0 ? false : _props$focus,\n    passthroughProps = _objectWithoutPropertiesLoose(props, [\"focus\"]);\n  var _usePopoverContext3 = usePopoverContext([Popover.name, Panel.name].join('.')),\n    state = _usePopoverContext3[0],\n    dispatch = _usePopoverContext3[1];\n  var _usePopoverAPIContext = usePopoverAPIContext([Popover.name, Panel.name].join('.')),\n    close = _usePopoverAPIContext.close;\n  var internalPanelRef = useRef(null);\n  var panelRef = useSyncRefs(internalPanelRef, ref, function (panel) {\n    dispatch({\n      type: ActionTypes.SetPanel,\n      panel: panel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n    return state.popoverState === PopoverStates.Open;\n  }();\n  var handleKeyDown = useCallback(function (event) {\n    var _state$button6;\n    switch (event.key) {\n      case Keys.Escape:\n        if (state.popoverState !== PopoverStates.Open) return;\n        if (!internalPanelRef.current) return;\n        if (!internalPanelRef.current.contains(document.activeElement)) return;\n        event.preventDefault();\n        event.stopPropagation();\n        dispatch({\n          type: ActionTypes.ClosePopover\n        });\n        (_state$button6 = state.button) == null ? void 0 : _state$button6.focus();\n        break;\n    }\n  }, [state, internalPanelRef, dispatch]); // Unlink on \"unmount\" myself\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n    if (props[\"static\"]) return;\n    if (state.popoverState === PopoverStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.SetPanel,\n        panel: null\n      });\n    }\n  }, [state.popoverState, props.unmount, props[\"static\"], dispatch]); // Move focus within panel\n\n  useEffect(function () {\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    var activeElement = document.activeElement;\n    if (internalPanelRef.current.contains(activeElement)) return; // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First);\n  }, [focus, internalPanelRef, state.popoverState]); // Handle Tab / Shift+Tab focus positioning\n\n  useWindowEvent('keydown', function (event) {\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if (event.key !== Keys.Tab) return;\n    if (!document.activeElement) return;\n    if (!internalPanelRef.current) return;\n    if (!internalPanelRef.current.contains(document.activeElement)) return; // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n\n    event.preventDefault();\n    var result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next);\n    if (result === FocusResult.Underflow) {\n      var _state$button7;\n      return (_state$button7 = state.button) == null ? void 0 : _state$button7.focus();\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return;\n      var elements = getFocusableElements();\n      var buttonIdx = elements.indexOf(state.button);\n      var nextElements = elements.splice(buttonIdx + 1) // Elements after button\n      .filter(function (element) {\n        var _internalPanelRef$cur;\n        return !((_internalPanelRef$cur = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur.contains(element));\n      }); // Ignore items in panel\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First);\n      }\n    }\n  }); // Handle focus out when we are in special \"focus\" mode\n\n  useWindowEvent('focus', function () {\n    var _internalPanelRef$cur2;\n    if (!focus) return;\n    if (state.popoverState !== PopoverStates.Open) return;\n    if (!internalPanelRef.current) return;\n    if ((_internalPanelRef$cur2 = internalPanelRef.current) == null ? void 0 : _internalPanelRef$cur2.contains(document.activeElement)) return;\n    dispatch({\n      type: ActionTypes.ClosePopover\n    });\n  }, true);\n  var slot = useMemo(function () {\n    return {\n      open: state.popoverState === PopoverStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown\n  };\n  return React.createElement(PopoverPanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Popover.Panel'\n  }));\n}); // ---\n\nvar DEFAULT_GROUP_TAG = 'div';\nfunction Group(props) {\n  var groupRef = useRef(null);\n  var _useState = useState([]),\n    popovers = _useState[0],\n    setPopovers = _useState[1];\n  var unregisterPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      var idx = existing.indexOf(registerbag);\n      if (idx !== -1) {\n        var clone = existing.slice();\n        clone.splice(idx, 1);\n        return clone;\n      }\n      return existing;\n    });\n  }, [setPopovers]);\n  var registerPopover = useCallback(function (registerbag) {\n    setPopovers(function (existing) {\n      return [].concat(existing, [registerbag]);\n    });\n    return function () {\n      return unregisterPopover(registerbag);\n    };\n  }, [setPopovers, unregisterPopover]);\n  var isFocusWithinPopoverGroup = useCallback(function () {\n    var _groupRef$current;\n    var element = document.activeElement;\n    if ((_groupRef$current = groupRef.current) == null ? void 0 : _groupRef$current.contains(element)) return true; // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n\n    return popovers.some(function (bag) {\n      var _document$getElementB, _document$getElementB2;\n      return ((_document$getElementB = document.getElementById(bag.buttonId)) == null ? void 0 : _document$getElementB.contains(element)) || ((_document$getElementB2 = document.getElementById(bag.panelId)) == null ? void 0 : _document$getElementB2.contains(element));\n    });\n  }, [groupRef, popovers]);\n  var closeOthers = useCallback(function (buttonId) {\n    for (var _iterator = _createForOfIteratorHelperLoose(popovers), _step; !(_step = _iterator()).done;) {\n      var popover = _step.value;\n      if (popover.buttonId !== buttonId) popover.close();\n    }\n  }, [popovers]);\n  var contextBag = useMemo(function () {\n    return {\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup: isFocusWithinPopoverGroup,\n      closeOthers: closeOthers\n    };\n  }, [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]);\n  var slot = useMemo(function () {\n    return {};\n  }, []);\n  var propsWeControl = {\n    ref: groupRef\n  };\n  var passthroughProps = props;\n  return React.createElement(PopoverGroupContext.Provider, {\n    value: contextBag\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_GROUP_TAG,\n    name: 'Popover.Group'\n  }));\n} // ---\n\nPopover.Button = Button;\nPopover.Overlay = Overlay;\nPopover.Panel = Panel;\nPopover.Group = Group;\nexport { Popover };","map":{"version":3,"names":["PopoverStates","ActionTypes","reducers","_reducers","TogglePopover","state","_match","_extends","popoverState","match","Open","Closed","ClosePopover","SetButton","action","button","SetButtonId","buttonId","SetPanel","panel","SetPanelId","panelId","PopoverContext","createContext","displayName","usePopoverContext","component","context","useContext","err","Error","Popover","name","captureStackTrace","PopoverAPIContext","usePopoverAPIContext","PopoverGroupContext","usePopoverGroupContext","PopoverPanelContext","usePopoverPanelContext","stateReducer","type","DEFAULT_POPOVER_TAG","props","useId","reducerBag","useReducer","_reducerBag$","dispatch","useEffect","registerBag","useMemo","close","groupContext","registerPopover","isFocusWithinPopoverGroup","useCallback","_groupContext$isFocus","contains","document","activeElement","useWindowEvent","event","target","isFocusableElement","FocusableMode","Loose","preventDefault","focus","focusableElement","restoreElement","HTMLElement","current","api","slot","open","React","createElement","Provider","value","OpenClosedProvider","_match2","State","render","defaultTag","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","ref","join","_usePopoverContext","internalButtonRef","useRef","closeOthers","panelContext","isWithinPanel","buttonRef","useSyncRefs","withinPanelButtonRef","activeElementRef","previousActiveElementRef","window","handleKeyDown","key","Keys","Space","Enter","stopPropagation","_state$button","Escape","Tab","shiftKey","_state$button2","focusableElements","getFocusableElements","previousIdx","indexOf","buttonIdx","focusIn","Focus","Last","First","handleKeyUp","_state$button3","handleClick","isDisabledReactIssue7711","currentTarget","disabled","_state$button4","_state$button5","useResolveButtonType","passthroughProps","propsWeControl","onKeyDown","onClick","id","undefined","onKeyUp","DEFAULT_OVERLAY_TAG","OverlayRenderFeatures","Features","RenderStrategy","Static","Overlay","_usePopoverContext2","overlayRef","usesOpenClosedState","useOpenClosed","visible","features","DEFAULT_PANEL_TAG","PanelRenderFeatures","Panel","_props$focus","_objectWithoutPropertiesLoose","_usePopoverContext3","_usePopoverAPIContext","internalPanelRef","panelRef","_state$button6","_props$unmount","unmount","result","Previous","Next","FocusResult","Underflow","_state$button7","Overflow","elements","nextElements","splice","filter","element","_internalPanelRef$cur","body","_internalPanelRef$cur2","DEFAULT_GROUP_TAG","Group","groupRef","useState","popovers","_useState","setPopovers","unregisterPopover","registerbag","existing","idx","clone","slice","concat","_groupRef$current","some","bag","_document$getElementB","getElementById","_document$getElementB2","_iterator","_createForOfIteratorHelperLoose","_step","done","popover","contextBag"],"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/node_modules/@headlessui/react/src/components/popover/popover.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nPopoverAPIContext.displayName = 'PopoverAPIContext'\n\nfunction usePopoverAPIContext(component: string) {\n  let context = useContext(PopoverAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.ClosePopover })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return button\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return button\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, button]\n  )\n\n  let api = useMemo<ContextType<typeof PopoverAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<PopoverRenderPropArg>(\n    () => ({ open: popoverState === PopoverStates.Open, close }),\n    [popoverState, close]\n  )\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <PopoverAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(popoverState, {\n            [PopoverStates.Open]: State.Open,\n            [PopoverStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props,\n            slot,\n            defaultTag: DEFAULT_POPOVER_TAG,\n            name: 'Popover',\n          })}\n        </OpenClosedProvider>\n      </PopoverAPIContext.Provider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n  let withinPanelButtonRef = useSyncRefs(internalButtonRef, ref)\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        ref: withinPanelButtonRef,\n        type,\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled ? undefined : state.popoverState === PopoverStates.Open,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & {\n      focus?: boolean\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let { close } = usePopoverAPIContext([Popover.name, Panel.name].join('.'))\n\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (props.static) return\n\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, props.static, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n"],"mappings":";;;;;;;;;;;;;AAuCA,IAAKA,aAAL;AAAA,WAAKA,aAAA;EACHA,aAAA,CAAAA,aAAA;EACAA,aAAA,CAAAA,aAAA;AACD,CAHD,EAAKA,aAAa,KAAbA,aAAa,MAAlB;AAcA,IAAKC,WAAL;AAAA,WAAKA,WAAA;EACHA,WAAA,CAAAA,WAAA;EACAA,WAAA,CAAAA,WAAA;EAEAA,WAAA,CAAAA,WAAA;EACAA,WAAA,CAAAA,WAAA;EACAA,WAAA,CAAAA,WAAA;EACAA,WAAA,CAAAA,WAAA;AACD,CARD,EAAKA,WAAW,KAAXA,WAAW,MAAhB;AAkBA,IAAIC,QAAQ,IAAAC,SAAA,OAAAA,SAAA,CAMTF,WAAW,CAACG,aANH,IAMmB,UAAAC,KAAK;EAAA,IAAAC,MAAA;EAAA,OAAAC,QAAA,KAC7BF,KAD6B;IAEhCG,YAAY,EAAEC,KAAK,CAACJ,KAAK,CAACG,YAAP,GAAAF,MAAA,OAAAA,MAAA,CAChBN,aAAa,CAACU,IADE,IACKV,aAAa,CAACW,MADnB,EAAAL,MAAA,CAEhBN,aAAa,CAACW,MAFE,IAEOX,aAAa,CAACU,IAFrB,EAAAJ,MAAA;EAFa;AAAA,CANxB,EAAAH,SAAA,CAaTF,WAAW,CAACW,YAbH,cAaiBP,KAbjB;EAcR,IAAIA,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACW,MAAzC,EAAiD,OAAON,KAAP;EACjD,OAAAE,QAAA,KAAYF,KAAZ;IAAmBG,YAAY,EAAER,aAAa,CAACW;EAA/C;AACD,CAhBS,EAAAR,SAAA,CAiBTF,WAAW,CAACY,SAjBH,cAiBcR,KAjBd,EAiBqBS,MAjBrB;EAkBR,IAAIT,KAAK,CAACU,MAAN,KAAiBD,MAAM,CAACC,MAA5B,EAAoC,OAAOV,KAAP;EACpC,OAAAE,QAAA,KAAYF,KAAZ;IAAmBU,MAAM,EAAED,MAAM,CAACC;EAAlC;AACD,CApBS,EAAAZ,SAAA,CAqBTF,WAAW,CAACe,WArBH,cAqBgBX,KArBhB,EAqBuBS,MArBvB;EAsBR,IAAIT,KAAK,CAACY,QAAN,KAAmBH,MAAM,CAACG,QAA9B,EAAwC,OAAOZ,KAAP;EACxC,OAAAE,QAAA,KAAYF,KAAZ;IAAmBY,QAAQ,EAAEH,MAAM,CAACG;EAApC;AACD,CAxBS,EAAAd,SAAA,CAyBTF,WAAW,CAACiB,QAzBH,cAyBab,KAzBb,EAyBoBS,MAzBpB;EA0BR,IAAIT,KAAK,CAACc,KAAN,KAAgBL,MAAM,CAACK,KAA3B,EAAkC,OAAOd,KAAP;EAClC,OAAAE,QAAA,KAAYF,KAAZ;IAAmBc,KAAK,EAAEL,MAAM,CAACK;EAAjC;AACD,CA5BS,EAAAhB,SAAA,CA6BTF,WAAW,CAACmB,UA7BH,cA6Bef,KA7Bf,EA6BsBS,MA7BtB;EA8BR,IAAIT,KAAK,CAACgB,OAAN,KAAkBP,MAAM,CAACO,OAA7B,EAAsC,OAAOhB,KAAP;EACtC,OAAAE,QAAA,KAAYF,KAAZ;IAAmBgB,OAAO,EAAEP,MAAM,CAACO;EAAnC;AACD,CAhCS,EAAAlB,SAAA,CAAZ;AAmCA,IAAImB,cAAc,gBAAGC,aAAa,CAA8C,IAA9C,CAAlC;AACAD,cAAc,CAACE,WAAf,GAA6B,gBAA7B;AAEA,SAASC,iBAATA,CAA2BC,SAA3B;EACE,IAAIC,OAAO,GAAGC,UAAU,CAACN,cAAD,CAAxB;EACA,IAAIK,OAAO,KAAK,IAAhB,EAAsB;IACpB,IAAIE,GAAG,GAAG,IAAIC,KAAJ,OAAcJ,SAAd,iCAAmDK,OAAO,CAACC,IAA3D,oBAAV;IACA,IAAIF,KAAK,CAACG,iBAAV,EAA6BH,KAAK,CAACG,iBAAN,CAAwBJ,GAAxB,EAA6BJ,iBAA7B;IAC7B,MAAMI,GAAN;EACD;EACD,OAAOF,OAAP;AACD;AAED,IAAIO,iBAAiB,gBAAGX,aAAa,CAE3B,IAF2B,CAArC;AAGAW,iBAAiB,CAACV,WAAlB,GAAgC,mBAAhC;AAEA,SAASW,oBAATA,CAA8BT,SAA9B;EACE,IAAIC,OAAO,GAAGC,UAAU,CAACM,iBAAD,CAAxB;EACA,IAAIP,OAAO,KAAK,IAAhB,EAAsB;IACpB,IAAIE,GAAG,GAAG,IAAIC,KAAJ,OAAcJ,SAAd,iCAAmDK,OAAO,CAACC,IAA3D,oBAAV;IACA,IAAIF,KAAK,CAACG,iBAAV,EAA6BH,KAAK,CAACG,iBAAN,CAAwBJ,GAAxB,EAA6BM,oBAA7B;IAC7B,MAAMN,GAAN;EACD;EACD,OAAOF,OAAP;AACD;AAED,IAAIS,mBAAmB,gBAAGb,aAAa,CAK7B,IAL6B,CAAvC;AAMAa,mBAAmB,CAACZ,WAApB,GAAkC,qBAAlC;AAEA,SAASa,sBAATA,CAAA;EACE,OAAOT,UAAU,CAACQ,mBAAD,CAAjB;AACD;AAED,IAAIE,mBAAmB,gBAAGf,aAAa,CAAgB,IAAhB,CAAvC;AACAe,mBAAmB,CAACd,WAApB,GAAkC,qBAAlC;AAEA,SAASe,sBAATA,CAAA;EACE,OAAOX,UAAU,CAACU,mBAAD,CAAjB;AACD;AAOD,SAASE,YAATA,CAAsBnC,KAAtB,EAA8CS,MAA9C;EACE,OAAOL,KAAK,CAACK,MAAM,CAAC2B,IAAR,EAAcvC,QAAd,EAAwBG,KAAxB,EAA+BS,MAA/B,CAAZ;AACD;;AAID,IAAI4B,mBAAmB,GAAG,KAA1B;SAMgBX,QACdY,KAAA;;EAEA,IAAI1B,QAAQ,kCAAgC2B,KAAK,EAAjD;EACA,IAAIvB,OAAO,iCAA+BuB,KAAK,EAA/C;EAEA,IAAIC,UAAU,GAAGC,UAAU,CAACN,YAAD,EAAe;IACxChC,YAAY,EAAER,aAAa,CAACW,MADY;IAExCI,MAAM,EAAE,IAFgC;IAGxCE,QAAQ,EAARA,QAHwC;IAIxCE,KAAK,EAAE,IAJiC;IAKxCE,OAAO,EAAPA;EALwC,CAAf,CAA3B;qBAOkDwB,UAAA;IAA3CrC,YAAA,GAAAuC,YAAA,CAAAvC,YAAA;IAAcO,MAAA,GAAAgC,YAAA,CAAAhC,MAAA;IAAQI,KAAA,GAAA4B,YAAA,CAAA5B,KAAA;IAAS6B,QAAA,GAAYH,UAAA;EAElDI,SAAS,CAAC;IAAA,OAAMD,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACe,WAApB;MAAiCC,QAAQ,EAARA;IAAjC,CAAD,CAAd;EAAA,CAAD,EAA8D,CAACA,QAAD,EAAW+B,QAAX,CAA9D,CAAT;EACAC,SAAS,CAAC;IAAA,OAAMD,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACmB,UAApB;MAAgCC,OAAO,EAAPA;IAAhC,CAAD,CAAd;EAAA,CAAD,EAA4D,CAACA,OAAD,EAAU2B,QAAV,CAA5D,CAAT;EAEA,IAAIE,WAAW,GAAGC,OAAO,CACvB;IAAA,OAAO;MAAElC,QAAQ,EAARA,QAAF;MAAYI,OAAO,EAAPA,OAAZ;MAAqB+B,KAAK,EAAE,SAAAA,MAAA;QAAA,OAAMJ,QAAQ,CAAC;UAAEP,IAAI,EAAExC,WAAW,CAACW;QAApB,CAAD,CAAd;MAAA;IAA5B,CAAP;EAAA,CADuB,EAEvB,CAACK,QAAD,EAAWI,OAAX,EAAoB2B,QAApB,CAFuB,CAAzB;EAKA,IAAIK,YAAY,GAAGhB,sBAAsB,EAAzC;EACA,IAAIiB,eAAe,GAAGD,YAAH,oBAAGA,YAAY,CAAEC,eAApC;EACA,IAAIC,yBAAyB,GAAGC,WAAW,CAAC;;IAC1C,QAAAC,qBAAA,GACEJ,YADF,oBACEA,YAAY,CAAEE,yBAAd,EADF,YAAAE,qBAAA,GAEG,CAAA1C,MAAM,QAAN,YAAAA,MAAM,CAAE2C,QAAR,CAAiBC,QAAQ,CAACC,aAA1B,OAA4CzC,KAA5C,oBAA4CA,KAAK,CAAEuC,QAAP,CAAgBC,QAAQ,CAACC,aAAzB,CAA5C,CAFH;EAID,CAL0C,EAKxC,CAACP,YAAD,EAAetC,MAAf,EAAuBI,KAAvB,CALwC,CAA3C;EAOA8B,SAAS,CAAC;IAAA,OAAMK,eAAN,oBAAMA,eAAe,CAAGJ,WAAH,CAArB;EAAA,CAAD,EAAuC,CAACI,eAAD,EAAkBJ,WAAlB,CAAvC,CAAT;;EAGAW,cAAc,CACZ,OADY,EAEZ;IACE,IAAIrD,YAAY,KAAKR,aAAa,CAACU,IAAnC,EAAyC;IACzC,IAAI6C,yBAAyB,EAA7B,EAAiC;IACjC,IAAI,CAACxC,MAAL,EAAa;IACb,IAAI,CAACI,KAAL,EAAY;IAEZ6B,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACW;IAApB,CAAD,CAAR;EACD,CATW,EAUZ,IAVY,CAAd;;EAcAiD,cAAc,CAAC,WAAD,EAAc,UAAAC,KAAK;IAC/B,IAAIC,MAAM,GAAGD,KAAK,CAACC,MAAnB;IAEA,IAAIvD,YAAY,KAAKR,aAAa,CAACU,IAAnC,EAAyC;IAEzC,IAAIK,MAAJ,oBAAIA,MAAM,CAAE2C,QAAR,CAAiBK,MAAjB,CAAJ,EAA8B;IAC9B,IAAI5C,KAAJ,oBAAIA,KAAK,CAAEuC,QAAP,CAAgBK,MAAhB,CAAJ,EAA6B;IAE7Bf,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACW;IAApB,CAAD,CAAR;IAEA,IAAI,CAACoD,kBAAkB,CAACD,MAAD,EAASE,aAAa,CAACC,KAAvB,CAAvB,EAAsD;MACpDJ,KAAK,CAACK,cAAN;MACApD,MAAM,QAAN,YAAAA,MAAM,CAAEqD,KAAR;IACD;EACF,CAda,CAAd;EAgBA,IAAIhB,KAAK,GAAGI,WAAW,CACrB,UAACa,gBAAD;IACErB,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACW;IAApB,CAAD,CAAR;IAEA,IAAI0D,cAAc,GAAI;MACpB,IAAI,CAACD,gBAAL,EAAuB,OAAOtD,MAAP;MACvB,IAAIsD,gBAAgB,YAAYE,WAAhC,EAA6C,OAAOF,gBAAP;MAC7C,IAAIA,gBAAgB,CAACG,OAAjB,YAAoCD,WAAxC,EAAqD,OAAOF,gBAAgB,CAACG,OAAxB;MAErD,OAAOzD,MAAP;IACD,CANoB,EAArB;IAQAuD,cAAc,QAAd,YAAAA,cAAc,CAAEF,KAAhB;EACD,CAboB,EAcrB,CAACpB,QAAD,EAAWjC,MAAX,CAdqB,CAAvB;EAiBA,IAAI0D,GAAG,GAAGtB,OAAO,CAAwC;IAAA,OAAO;MAAEC,KAAK,EAALA;IAAF,CAAP;EAAA,CAAxC,EAA2D,CAACA,KAAD,CAA3D,CAAjB;EAEA,IAAIsB,IAAI,GAAGvB,OAAO,CAChB;IAAA,OAAO;MAAEwB,IAAI,EAAEnE,YAAY,KAAKR,aAAa,CAACU,IAAvC;MAA6C0C,KAAK,EAALA;IAA7C,CAAP;EAAA,CADgB,EAEhB,CAAC5C,YAAD,EAAe4C,KAAf,CAFgB,CAAlB;EAKA,OACEwB,KAAA,CAAAC,aAAA,CAACvD,cAAc,CAACwD,QAAhB;IAAyBC,KAAK,EAAElC;GAAhC,EACE+B,KAAA,CAAAC,aAAA,CAAC3C,iBAAiB,CAAC4C,QAAnB;IAA4BC,KAAK,EAAEN;GAAnC,EACEG,KAAA,CAAAC,aAAA,CAACG,kBAAD;IACED,KAAK,EAAEtE,KAAK,CAACD,YAAD,GAAAyE,OAAA,OAAAA,OAAA,CACTjF,aAAa,CAACU,IADL,IACYwE,KAAK,CAACxE,IADlB,EAAAuE,OAAA,CAETjF,aAAa,CAACW,MAFL,IAEcuE,KAAK,CAACvE,MAFpB,EAAAsE,OAAA;GADd,EAMGE,MAAM,CAAC;IACNxC,KAAK,EAALA,KADM;IAEN+B,IAAI,EAAJA,IAFM;IAGNU,UAAU,EAAE1C,mBAHN;IAINV,IAAI,EAAE;EAJA,CAAD,CANT,CADF,CADF,CADF;AAmBD;;AAID,IAAIqD,kBAAkB,GAAG,QAAzB;AAYA,IAAIC,MAAM,gBAAGC,gBAAgB,CAAC,SAASD,MAATA,CAC5B3C,KAD4B,EAE5B6C,GAF4B;2BAIJ/D,iBAAiB,CAAC,CAACM,OAAO,CAACC,IAAT,EAAesD,MAAM,CAACtD,IAAtB,EAA4ByD,IAA5B,CAAiC,GAAjC,CAAD;IAApCpF,KAAA,GAAAqF,kBAAA;IAAO1C,QAAA,GAAA0C,kBAAA;EACZ,IAAIC,iBAAiB,GAAGC,MAAM,CAA2B,IAA3B,CAA9B;EAEA,IAAIvC,YAAY,GAAGhB,sBAAsB,EAAzC;EACA,IAAIwD,WAAW,GAAGxC,YAAH,oBAAGA,YAAY,CAAEwC,WAAhC;EAEA,IAAIC,YAAY,GAAGvD,sBAAsB,EAAzC;EACA,IAAIwD,aAAa,GAAGD,YAAY,KAAK,IAAjB,GAAwB,KAAxB,GAAgCA,YAAY,KAAKzF,KAAK,CAACgB,OAA3E;EAEA,IAAI2E,SAAS,GAAGC,WAAW,CACzBN,iBADyB,EAEzBH,GAFyB,EAGzBO,aAAa,GAAG,IAAH,GAAU,UAAAhF,MAAM;IAAA,OAAIiC,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACY,SAApB;MAA+BE,MAAM,EAANA;IAA/B,CAAD,CAAZ;EAAA,CAHJ,CAA3B;EAKA,IAAImF,oBAAoB,GAAGD,WAAW,CAACN,iBAAD,EAAoBH,GAApB,CAAtC;;EAGA,IAAIW,gBAAgB,GAAGP,MAAM,CAAiB,IAAjB,CAA7B;EACA,IAAIQ,wBAAwB,GAAGR,MAAM,CACnC,OAAOS,MAAP,KAAkB,WAAlB,GAAgC,IAAhC,GAAuC1C,QAAQ,CAACC,aADb,CAArC;EAGAC,cAAc,CACZ,OADY,EAEZ;IACEuC,wBAAwB,CAAC5B,OAAzB,GAAmC2B,gBAAgB,CAAC3B,OAApD;IACA2B,gBAAgB,CAAC3B,OAAjB,GAA2Bb,QAAQ,CAACC,aAApC;EACD,CALW,EAMZ,IANY,CAAd;EASA,IAAI0C,aAAa,GAAG9C,WAAW,CAC7B,UAACM,KAAD;;IACE,IAAIiC,aAAJ,EAAmB;MACjB,IAAI1F,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACW,MAAzC,EAAiD;MACjD,QAAQmD,KAAK,CAACyC,GAAd;QACE,KAAKC,IAAI,CAACC,KAAV;QACA,KAAKD,IAAI,CAACE,KAAV;UACE5C,KAAK,CAACK,cAAN,GADF;;UAEEL,KAAK,CAAC6C,eAAN;UACA3D,QAAQ,CAAC;YAAEP,IAAI,EAAExC,WAAW,CAACW;UAApB,CAAD,CAAR;UACA,CAAAgG,aAAA,GAAAvG,KAAK,CAACU,MAAN,qBAAA6F,aAAA,CAAcxC,KAAd,GAJF;;UAKE;MAPJ;IASD,CAXD,MAWO;MACL,QAAQN,KAAK,CAACyC,GAAd;QACE,KAAKC,IAAI,CAACC,KAAV;QACA,KAAKD,IAAI,CAACE,KAAV;UACE5C,KAAK,CAACK,cAAN,GADF;;UAEEL,KAAK,CAAC6C,eAAN;UACA,IAAItG,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACW,MAAzC,EAAiDkF,WAAW,QAAX,YAAAA,WAAW,CAAGxF,KAAK,CAACY,QAAT,CAAX;UACjD+B,QAAQ,CAAC;YAAEP,IAAI,EAAExC,WAAW,CAACG;UAApB,CAAD,CAAR;UACA;QAEF,KAAKoG,IAAI,CAACK,MAAV;UACE,IAAIxG,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C,OAAOmF,WAAP,oBAAOA,WAAW,CAAGxF,KAAK,CAACY,QAAT,CAAlB;UAC/C,IAAI,CAAC0E,iBAAiB,CAACnB,OAAvB,EAAgC;UAChC,IAAI,CAACmB,iBAAiB,CAACnB,OAAlB,CAA0Bd,QAA1B,CAAmCC,QAAQ,CAACC,aAA5C,CAAL,EAAiE;UACjEE,KAAK,CAACK,cAAN;UACAL,KAAK,CAAC6C,eAAN;UACA3D,QAAQ,CAAC;YAAEP,IAAI,EAAExC,WAAW,CAACW;UAApB,CAAD,CAAR;UACA;QAEF,KAAK4F,IAAI,CAACM,GAAV;UACE,IAAIzG,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C;UAC/C,IAAI,CAACL,KAAK,CAACc,KAAX,EAAkB;UAClB,IAAI,CAACd,KAAK,CAACU,MAAX,EAAmB,OAHrB;;UAME,IAAI+C,KAAK,CAACiD,QAAV,EAAoB;YAAA,IAAAC,cAAA;;YAClB;YACA,IAAI,CAACZ,wBAAwB,CAAC5B,OAA9B,EAAuC;YACvC,KAAAwC,cAAA,GAAI3G,KAAK,CAACU,MAAV,qBAAIiG,cAAA,CAActD,QAAd,CAAuB0C,wBAAwB,CAAC5B,OAAhD,CAAJ,EAA8D;YAC9D,IAAInE,KAAK,CAACc,KAAN,CAAYuC,QAAZ,CAAqB0C,wBAAwB,CAAC5B,OAA9C,CAAJ,EAA4D,OAJ1C;;YAOlB,IAAIyC,iBAAiB,GAAGC,oBAAoB,EAA5C;YACA,IAAIC,WAAW,GAAGF,iBAAiB,CAACG,OAAlB,CAChBhB,wBAAwB,CAAC5B,OADT,CAAlB;YAGA,IAAI6C,SAAS,GAAGJ,iBAAiB,CAACG,OAAlB,CAA0B/G,KAAK,CAACU,MAAhC,CAAhB;YACA,IAAIsG,SAAS,GAAGF,WAAhB,EAA6B;YAE7BrD,KAAK,CAACK,cAAN;YACAL,KAAK,CAAC6C,eAAN;YAEAW,OAAO,CAACjH,KAAK,CAACc,KAAP,EAAcoG,KAAK,CAACC,IAApB,CAAP;UACD,CAlBD,MAkBO;YACL1D,KAAK,CAACK,cAAN;YACAL,KAAK,CAAC6C,eAAN;YAEAW,OAAO,CAACjH,KAAK,CAACc,KAAP,EAAcoG,KAAK,CAACE,KAApB,CAAP;UACD;UAED;MAjDJ;IAmDD;EACF,CAlE4B,EAmE7B,CACEzE,QADF,EAEE3C,KAAK,CAACG,YAFR,EAGEH,KAAK,CAACY,QAHR,EAIEZ,KAAK,CAACU,MAJR,EAKEV,KAAK,CAACc,KALR,EAMEwE,iBANF,EAOEE,WAPF,EAQEE,aARF,CAnE6B,CAA/B;EA+EA,IAAI2B,WAAW,GAAGlE,WAAW,CAC3B,UAACM,KAAD;;IACE,IAAIiC,aAAJ,EAAmB;IACnB,IAAIjC,KAAK,CAACyC,GAAN,KAAcC,IAAI,CAACC,KAAvB,EAA8B;MAC5B;MACA;MACA;MACA3C,KAAK,CAACK,cAAN;IACD;IACD,IAAI9D,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C;IAC/C,IAAI,CAACL,KAAK,CAACc,KAAX,EAAkB;IAClB,IAAI,CAACd,KAAK,CAACU,MAAX,EAAmB;;IAGnB,QAAQ+C,KAAK,CAACyC,GAAd;MACE,KAAKC,IAAI,CAACM,GAAV;QACE;QACA,IAAI,CAACV,wBAAwB,CAAC5B,OAA9B,EAAuC;QACvC,KAAAmD,cAAA,GAAItH,KAAK,CAACU,MAAV,qBAAI4G,cAAA,CAAcjE,QAAd,CAAuB0C,wBAAwB,CAAC5B,OAAhD,CAAJ,EAA8D;QAC9D,IAAInE,KAAK,CAACc,KAAN,CAAYuC,QAAZ,CAAqB0C,wBAAwB,CAAC5B,OAA9C,CAAJ,EAA4D,OAJ9D;;QAOE,IAAIyC,iBAAiB,GAAGC,oBAAoB,EAA5C;QACA,IAAIC,WAAW,GAAGF,iBAAiB,CAACG,OAAlB,CAChBhB,wBAAwB,CAAC5B,OADT,CAAlB;QAGA,IAAI6C,SAAS,GAAGJ,iBAAiB,CAACG,OAAlB,CAA0B/G,KAAK,CAACU,MAAhC,CAAhB;QACA,IAAIsG,SAAS,GAAGF,WAAhB,EAA6B;QAE7BrD,KAAK,CAACK,cAAN;QACAL,KAAK,CAAC6C,eAAN;QACAW,OAAO,CAACjH,KAAK,CAACc,KAAP,EAAcoG,KAAK,CAACC,IAApB,CAAP;QACA;IAlBJ;EAoBD,CAlC0B,EAmC3B,CAACnH,KAAK,CAACG,YAAP,EAAqBH,KAAK,CAACc,KAA3B,EAAkCd,KAAK,CAACU,MAAxC,EAAgDgF,aAAhD,CAnC2B,CAA7B;EAsCA,IAAI6B,WAAW,GAAGpE,WAAW,CAC3B,UAACM,KAAD;IACE,IAAI+D,wBAAwB,CAAC/D,KAAK,CAACgE,aAAP,CAA5B,EAAmD;IACnD,IAAInF,KAAK,CAACoF,QAAV,EAAoB;IACpB,IAAIhC,aAAJ,EAAmB;MAAA,IAAAiC,cAAA;MACjBhF,QAAQ,CAAC;QAAEP,IAAI,EAAExC,WAAW,CAACW;MAApB,CAAD,CAAR;MACA,CAAAoH,cAAA,GAAA3H,KAAK,CAACU,MAAN,qBAAAiH,cAAA,CAAc5D,KAAd,GAFiB;IAGlB,CAHD,MAGO;MAAA,IAAA6D,cAAA;MACL,IAAI5H,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACW,MAAzC,EAAiDkF,WAAW,QAAX,YAAAA,WAAW,CAAGxF,KAAK,CAACY,QAAT,CAAX;MACjD,CAAAgH,cAAA,GAAA5H,KAAK,CAACU,MAAN,qBAAAkH,cAAA,CAAc7D,KAAd;MACApB,QAAQ,CAAC;QAAEP,IAAI,EAAExC,WAAW,CAACG;MAApB,CAAD,CAAR;IACD;EACF,CAZ0B,EAa3B,CACE4C,QADF,EAEE3C,KAAK,CAACU,MAFR,EAGEV,KAAK,CAACG,YAHR,EAIEH,KAAK,CAACY,QAJR,EAKE0B,KAAK,CAACoF,QALR,EAMElC,WANF,EAOEE,aAPF,CAb2B,CAA7B;EAwBA,IAAIrB,IAAI,GAAGvB,OAAO,CAChB;IAAA,OAAO;MAAEwB,IAAI,EAAEtE,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU;IAA7C,CAAP;EAAA,CADgB,EAEhB,CAACL,KAAD,CAFgB,CAAlB;EAKA,IAAIoC,IAAI,GAAGyF,oBAAoB,CAACvF,KAAD,EAAQgD,iBAAR,CAA/B;EACA,IAAIwC,gBAAgB,GAAGxF,KAAvB;EACA,IAAIyF,cAAc,GAAGrC,aAAa,GAC9B;IACEP,GAAG,EAAEU,oBADP;IAEEzD,IAAI,EAAJA,IAFF;IAGE4F,SAAS,EAAE/B,aAHb;IAIEgC,OAAO,EAAEV;EAJX,CAD8B,GAO9B;IACEpC,GAAG,EAAEQ,SADP;IAEEuC,EAAE,EAAElI,KAAK,CAACY,QAFZ;IAGEwB,IAAI,EAAJA,IAHF;IAIE,iBAAiBE,KAAK,CAACoF,QAAN,GAAiBS,SAAjB,GAA6BnI,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAJrF;IAKE,iBAAiBL,KAAK,CAACc,KAAN,GAAcd,KAAK,CAACgB,OAApB,GAA8BmH,SALjD;IAMEH,SAAS,EAAE/B,aANb;IAOEmC,OAAO,EAAEf,WAPX;IAQEY,OAAO,EAAEV;EARX,CAPJ;EAkBA,OAAOzC,MAAM,CAAC;IACZxC,KAAK,EAAApC,QAAA,KAAO4H,gBAAP,EAA4BC,cAA5B,CADO;IAEZ1D,IAAI,EAAJA,IAFY;IAGZU,UAAU,EAAEC,kBAHA;IAIZrD,IAAI,EAAE;EAJM,CAAD,CAAb;AAMD,CA9M4B,CAA7B;;AAkNA,IAAI0G,mBAAmB,GAAG,KAA1B;AAMA,IAAIC,qBAAqB,GAAGC,QAAQ,CAACC,cAAT,GAA0BD,QAAQ,CAACE,MAA/D;AAEA,IAAIC,OAAO,gBAAGxD,gBAAgB,CAAC,SAASwD,OAATA,CAG7BpG,KAH6B,EAK7B6C,GAL6B;4BAOM/D,iBAAiB,CAAC,CAACM,OAAO,CAACC,IAAT,EAAe+G,OAAO,CAAC/G,IAAvB,EAA6ByD,IAA7B,CAAkC,GAAlC,CAAD;IAA7CjF,YAAA,GAAAwI,mBAAA,IAAAxI,YAAA;IAAgBwC,QAAA,GAAAgG,mBAAA;EACvB,IAAIC,UAAU,GAAGhD,WAAW,CAACT,GAAD,CAA5B;EAEA,IAAI+C,EAAE,mCAAiC3F,KAAK,EAA5C;EAEA,IAAIsG,mBAAmB,GAAGC,aAAa,EAAvC;EACA,IAAIC,OAAO,GAAI;IACb,IAAIF,mBAAmB,KAAK,IAA5B,EAAkC;MAChC,OAAOA,mBAAmB,KAAKhE,KAAK,CAACxE,IAArC;IACD;IAED,OAAOF,YAAY,KAAKR,aAAa,CAACU,IAAtC;EACD,CANa,EAAd;EAQA,IAAIkH,WAAW,GAAGpE,WAAW,CAC3B,UAACM,KAAD;IACE,IAAI+D,wBAAwB,CAAC/D,KAAK,CAACgE,aAAP,CAA5B,EAAmD,OAAOhE,KAAK,CAACK,cAAN,EAAP;IACnDnB,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACW;IAApB,CAAD,CAAR;EACD,CAJ0B,EAK3B,CAACoC,QAAD,CAL2B,CAA7B;EAQA,IAAI0B,IAAI,GAAGvB,OAAO,CAAuB;IAAA,OAAO;MAAEwB,IAAI,EAAEnE,YAAY,KAAKR,aAAa,CAACU;IAAvC,CAAP;EAAA,CAAvB,EAA8E,CAC9FF,YAD8F,CAA9E,CAAlB;EAGA,IAAI4H,cAAc,GAAG;IACnB5C,GAAG,EAAEyD,UADc;IAEnBV,EAAE,EAAFA,EAFmB;IAGnB,eAAe,IAHI;IAInBD,OAAO,EAAEV;EAJU,CAArB;EAMA,IAAIO,gBAAgB,GAAGxF,KAAvB;EAEA,OAAOwC,MAAM,CAAC;IACZxC,KAAK,EAAApC,QAAA,KAAO4H,gBAAP,EAA4BC,cAA5B,CADO;IAEZ1D,IAAI,EAAJA,IAFY;IAGZU,UAAU,EAAEsD,mBAHA;IAIZW,QAAQ,EAAEV,qBAJE;IAKZS,OAAO,EAAPA,OALY;IAMZpH,IAAI,EAAE;EANM,CAAD,CAAb;AAQD,CAhD6B,CAA9B;;AAoDA,IAAIsH,iBAAiB,GAAG,KAAxB;AAOA,IAAIC,mBAAmB,GAAGX,QAAQ,CAACC,cAAT,GAA0BD,QAAQ,CAACE,MAA7D;AAEA,IAAIU,KAAK,gBAAGjE,gBAAgB,CAAC,SAASiE,KAATA,CAC3B7G,KAD2B,EAK3B6C,GAL2B;qBAOkB7C,KAAA,CAAvCyB,KAAA;IAAAA,KAAA,GAAAqF,YAAA,cAAQ,QAAAA,YAAA;IAAUtB,gBAAA,GAAAuB,6BAAA,CAAqB/G,KAAA;4BAErBlB,iBAAiB,CAAC,CAACM,OAAO,CAACC,IAAT,EAAewH,KAAK,CAACxH,IAArB,EAA2ByD,IAA3B,CAAgC,GAAhC,CAAD;IAApCpF,KAAA,GAAAsJ,mBAAA;IAAO3G,QAAA,GAAA2G,mBAAA;8BACIxH,oBAAoB,CAAC,CAACJ,OAAO,CAACC,IAAT,EAAewH,KAAK,CAACxH,IAArB,EAA2ByD,IAA3B,CAAgC,GAAhC,CAAD;IAA9BrC,KAAA,GAAAwG,qBAAA,CAAAxG,KAAA;EAEN,IAAIyG,gBAAgB,GAAGjE,MAAM,CAAwB,IAAxB,CAA7B;EACA,IAAIkE,QAAQ,GAAG7D,WAAW,CAAC4D,gBAAD,EAAmBrE,GAAnB,EAAwB,UAAArE,KAAK;IACrD6B,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACiB,QAApB;MAA8BC,KAAK,EAALA;IAA9B,CAAD,CAAR;EACD,CAFyB,CAA1B;EAIA,IAAI+H,mBAAmB,GAAGC,aAAa,EAAvC;EACA,IAAIC,OAAO,GAAI;IACb,IAAIF,mBAAmB,KAAK,IAA5B,EAAkC;MAChC,OAAOA,mBAAmB,KAAKhE,KAAK,CAACxE,IAArC;IACD;IAED,OAAOL,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAA5C;EACD,CANa,EAAd;EAQA,IAAI4F,aAAa,GAAG9C,WAAW,CAC7B,UAACM,KAAD;;IACE,QAAQA,KAAK,CAACyC,GAAd;MACE,KAAKC,IAAI,CAACK,MAAV;QACE,IAAIxG,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C;QAC/C,IAAI,CAACmJ,gBAAgB,CAACrF,OAAtB,EAA+B;QAC/B,IAAI,CAACqF,gBAAgB,CAACrF,OAAjB,CAAyBd,QAAzB,CAAkCC,QAAQ,CAACC,aAA3C,CAAL,EAAgE;QAChEE,KAAK,CAACK,cAAN;QACAL,KAAK,CAAC6C,eAAN;QACA3D,QAAQ,CAAC;UAAEP,IAAI,EAAExC,WAAW,CAACW;QAApB,CAAD,CAAR;QACA,CAAAmJ,cAAA,GAAA1J,KAAK,CAACU,MAAN,qBAAAgJ,cAAA,CAAc3F,KAAd;QACA;IATJ;EAWD,CAb4B,EAc7B,CAAC/D,KAAD,EAAQwJ,gBAAR,EAA0B7G,QAA1B,CAd6B,CAA/B;;EAkBAC,SAAS,CAAC;IAAA,OAAM;MAAA,OAAMD,QAAQ,CAAC;QAAEP,IAAI,EAAExC,WAAW,CAACiB,QAApB;QAA8BC,KAAK,EAAE;MAArC,CAAD,CAAd;IAAA,CAAN;EAAA,CAAD,EAAoE,CAAC6B,QAAD,CAApE,CAAT;;EAGAC,SAAS,CAAC;;IACR,IAAIN,KAAK,UAAT,EAAkB;IAElB,IAAItC,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACW,MAArC,MAAAqJ,cAAA,GAAgDrH,KAAK,CAACsH,OAAtD,YAAAD,cAAA,GAAiE,IAAjE,CAAJ,EAA4E;MAC1EhH,QAAQ,CAAC;QAAEP,IAAI,EAAExC,WAAW,CAACiB,QAApB;QAA8BC,KAAK,EAAE;MAArC,CAAD,CAAR;IACD;EACF,CANQ,EAMN,CAACd,KAAK,CAACG,YAAP,EAAqBmC,KAAK,CAACsH,OAA3B,EAAoCtH,KAAK,UAAzC,EAAkDK,QAAlD,CANM,CAAT;;EASAC,SAAS,CAAC;IACR,IAAI,CAACmB,KAAL,EAAY;IACZ,IAAI/D,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C;IAC/C,IAAI,CAACmJ,gBAAgB,CAACrF,OAAtB,EAA+B;IAE/B,IAAIZ,aAAa,GAAGD,QAAQ,CAACC,aAA7B;IACA,IAAIiG,gBAAgB,CAACrF,OAAjB,CAAyBd,QAAzB,CAAkCE,aAAlC,CAAJ,EAAsD;;IAEtD0D,OAAO,CAACuC,gBAAgB,CAACrF,OAAlB,EAA2B+C,KAAK,CAACE,KAAjC,CAAP;EACD,CATQ,EASN,CAACrD,KAAD,EAAQyF,gBAAR,EAA0BxJ,KAAK,CAACG,YAAhC,CATM,CAAT;;EAYAqD,cAAc,CAAC,SAAD,EAAY,UAAAC,KAAK;IAC7B,IAAIzD,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C;IAC/C,IAAI,CAACmJ,gBAAgB,CAACrF,OAAtB,EAA+B;IAC/B,IAAIV,KAAK,CAACyC,GAAN,KAAcC,IAAI,CAACM,GAAvB,EAA4B;IAC5B,IAAI,CAACnD,QAAQ,CAACC,aAAd,EAA6B;IAC7B,IAAI,CAACiG,gBAAgB,CAACrF,OAAtB,EAA+B;IAC/B,IAAI,CAACqF,gBAAgB,CAACrF,OAAjB,CAAyBd,QAAzB,CAAkCC,QAAQ,CAACC,aAA3C,CAAL,EAAgE;IAGhE;IACA;IACA;;IACAE,KAAK,CAACK,cAAN;IAEA,IAAI+F,MAAM,GAAG5C,OAAO,CAACuC,gBAAgB,CAACrF,OAAlB,EAA2BV,KAAK,CAACiD,QAAN,GAAiBQ,KAAK,CAAC4C,QAAvB,GAAkC5C,KAAK,CAAC6C,IAAnE,CAApB;IAEA,IAAIF,MAAM,KAAKG,WAAW,CAACC,SAA3B,EAAsC;MAAA,IAAAC,cAAA;MACpC,QAAAA,cAAA,GAAOlK,KAAK,CAACU,MAAb,qBAAOwJ,cAAA,CAAcnG,KAAd,EAAP;IACD,CAFD,MAEO,IAAI8F,MAAM,KAAKG,WAAW,CAACG,QAA3B,EAAqC;MAC1C,IAAI,CAACnK,KAAK,CAACU,MAAX,EAAmB;MAEnB,IAAI0J,QAAQ,GAAGvD,oBAAoB,EAAnC;MACA,IAAIG,SAAS,GAAGoD,QAAQ,CAACrD,OAAT,CAAiB/G,KAAK,CAACU,MAAvB,CAAhB;MAEA,IAAI2J,YAAY,GAAGD,QAAQ,CACxBE,MADgB,CACTtD,SAAS,GAAG,CADH;MAAA,CAEhBuD,MAFgB,CAET,UAAAC,OAAO;QAAA,IAAAC,qBAAA;QAAA,OAAI,GAAAA,qBAAA,GAACjB,gBAAgB,CAACrF,OAAlB,qBAACsG,qBAAA,CAA0BpH,QAA1B,CAAmCmH,OAAnC,CAAD,CAAJ;MAAA,CAFE,CAAnB,CAN0C;MAU1C;MACA;MACA;MACA;MACA;;MACA,IAAIvD,OAAO,CAACoD,YAAD,EAAenD,KAAK,CAACE,KAArB,CAAP,KAAuC4C,WAAW,CAACvI,KAAvD,EAA8D;QAC5DwF,OAAO,CAAC3D,QAAQ,CAACoH,IAAV,EAAgBxD,KAAK,CAACE,KAAtB,CAAP;MACD;IACF;EACF,CArCa,CAAd;;EAwCA5D,cAAc,CACZ,OADY,EAEZ;;IACE,IAAI,CAACO,KAAL,EAAY;IACZ,IAAI/D,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAAzC,EAA+C;IAC/C,IAAI,CAACmJ,gBAAgB,CAACrF,OAAtB,EAA+B;IAE/B,KAAAwG,sBAAA,GAAInB,gBAAgB,CAACrF,OAArB,qBAAIwG,sBAAA,CAA0BtH,QAA1B,CAAmCC,QAAQ,CAACC,aAA5C,CAAJ,EAA+E;IAC/EZ,QAAQ,CAAC;MAAEP,IAAI,EAAExC,WAAW,CAACW;IAApB,CAAD,CAAR;EACD,CATW,EAUZ,IAVY,CAAd;EAaA,IAAI8D,IAAI,GAAGvB,OAAO,CAChB;IAAA,OAAO;MAAEwB,IAAI,EAAEtE,KAAK,CAACG,YAAN,KAAuBR,aAAa,CAACU,IAA7C;MAAmD0C,KAAK,EAALA;IAAnD,CAAP;EAAA,CADgB,EAEhB,CAAC/C,KAAD,EAAQ+C,KAAR,CAFgB,CAAlB;EAIA,IAAIgF,cAAc,GAAG;IACnB5C,GAAG,EAAEsE,QADc;IAEnBvB,EAAE,EAAElI,KAAK,CAACgB,OAFS;IAGnBgH,SAAS,EAAE/B;EAHQ,CAArB;EAMA,OACE1B,KAAA,CAAAC,aAAA,CAACvC,mBAAmB,CAACwC,QAArB;IAA8BC,KAAK,EAAE1E,KAAK,CAACgB;GAA3C,EACG8D,MAAM,CAAC;IACNxC,KAAK,EAAApC,QAAA,KAAO4H,gBAAP,EAA4BC,cAA5B,CADC;IAEN1D,IAAI,EAAJA,IAFM;IAGNU,UAAU,EAAEkE,iBAHN;IAIND,QAAQ,EAAEE,mBAJJ;IAKNH,OAAO,EAAPA,OALM;IAMNpH,IAAI,EAAE;EANA,CAAD,CADT,CADF;AAYD,CA/I2B,CAA5B;;AAmJA,IAAIiJ,iBAAiB,GAAG,KAAxB;AAIA,SAASC,KAATA,CACEvI,KADF;EAGE,IAAIwI,QAAQ,GAAGvF,MAAM,CAAqB,IAArB,CAArB;kBAC8BwF,QAAQ,CAAuB,EAAvB;IAAjCC,QAAA,GAAAC,SAAA;IAAUC,WAAA,GAAAD,SAAA;EAEf,IAAIE,iBAAiB,GAAGhI,WAAW,CACjC,UAACiI,WAAD;IACEF,WAAW,CAAC,UAAAG,QAAQ;MAClB,IAAIC,GAAG,GAAGD,QAAQ,CAACtE,OAAT,CAAiBqE,WAAjB,CAAV;MACA,IAAIE,GAAG,KAAK,CAAC,CAAb,EAAgB;QACd,IAAIC,KAAK,GAAGF,QAAQ,CAACG,KAAT,EAAZ;QACAD,KAAK,CAACjB,MAAN,CAAagB,GAAb,EAAkB,CAAlB;QACA,OAAOC,KAAP;MACD;MACD,OAAOF,QAAP;IACD,CARU,CAAX;EASD,CAXgC,EAYjC,CAACH,WAAD,CAZiC,CAAnC;EAeA,IAAIjI,eAAe,GAAGE,WAAW,CAC/B,UAACiI,WAAD;IACEF,WAAW,CAAC,UAAAG,QAAQ;MAAA,UAAAI,MAAA,CAAQJ,QAAR,GAAkBD,WAAlB;IAAA,CAAT,CAAX;IACA,OAAO;MAAA,OAAMD,iBAAiB,CAACC,WAAD,CAAvB;IAAA,CAAP;EACD,CAJ8B,EAK/B,CAACF,WAAD,EAAcC,iBAAd,CAL+B,CAAjC;EAQA,IAAIjI,yBAAyB,GAAGC,WAAW,CAAC;;IAC1C,IAAIqH,OAAO,GAAGlH,QAAQ,CAACC,aAAvB;IAEA,KAAAmI,iBAAA,GAAIZ,QAAQ,CAAC3G,OAAb,qBAAIuH,iBAAA,CAAkBrI,QAAlB,CAA2BmH,OAA3B,CAAJ,EAAyC,OAAO,IAAP;;IAGzC,OAAOQ,QAAQ,CAACW,IAAT,CAAc,UAAAC,GAAG;;MACtB,OACE,EAAAC,qBAAA,GAAAvI,QAAQ,CAACwI,cAAT,CAAwBF,GAAG,CAAChL,QAA5B,sBAAAiL,qBAAA,CAAuCxI,QAAvC,CAAgDmH,OAAhD,QAAAuB,sBAAA,GACAzI,QAAQ,CAACwI,cAAT,CAAwBF,GAAG,CAAC5K,OAA5B,CADA,qBACA+K,sBAAA,CAAsC1I,QAAtC,CAA+CmH,OAA/C,CADA,CADF;IAID,CALM,CAAP;EAMD,CAZ0C,EAYxC,CAACM,QAAD,EAAWE,QAAX,CAZwC,CAA3C;EAcA,IAAIxF,WAAW,GAAGrC,WAAW,CAC3B,UAACvC,QAAD;IACE,SAAAoL,SAAA,GAAAC,+BAAA,CAAoBjB,QAApB,GAAAkB,KAAA,IAAAA,KAAA,GAAAF,SAAA,IAAAG,IAAA,GAA8B;MAAA,IAArBC,OAAqB,GAAAF,KAAA,CAAAxH,KAAA;MAC5B,IAAI0H,OAAO,CAACxL,QAAR,KAAqBA,QAAzB,EAAmCwL,OAAO,CAACrJ,KAAR;IACpC;EACF,CAL0B,EAM3B,CAACiI,QAAD,CAN2B,CAA7B;EASA,IAAIqB,UAAU,GAAGvJ,OAAO,CACtB;IAAA,OAAO;MACLG,eAAe,EAAEA,eADZ;MAELkI,iBAAiB,EAAEA,iBAFd;MAGLjI,yBAAyB,EAAzBA,yBAHK;MAILsC,WAAW,EAAXA;IAJK,CAAP;EAAA,CADsB,EAOtB,CAACvC,eAAD,EAAkBkI,iBAAlB,EAAqCjI,yBAArC,EAAgEsC,WAAhE,CAPsB,CAAxB;EAUA,IAAInB,IAAI,GAAGvB,OAAO,CAAqB;IAAA,OAAO,EAAP;EAAA,CAArB,EAAiC,EAAjC,CAAlB;EACA,IAAIiF,cAAc,GAAG;IAAE5C,GAAG,EAAE2F;EAAP,CAArB;EACA,IAAIhD,gBAAgB,GAAGxF,KAAvB;EAEA,OACEiC,KAAA,CAAAC,aAAA,CAACzC,mBAAmB,CAAC0C,QAArB;IAA8BC,KAAK,EAAE2H;GAArC,EACGvH,MAAM,CAAC;IACNxC,KAAK,EAAApC,QAAA,KAAO4H,gBAAP,EAA4BC,cAA5B,CADC;IAEN1D,IAAI,EAAJA,IAFM;IAGNU,UAAU,EAAE6F,iBAHN;IAINjJ,IAAI,EAAE;EAJA,CAAD,CADT,CADF;AAUD;;AAIDD,OAAO,CAACuD,MAAR,GAAiBA,MAAjB;AACAvD,OAAO,CAACgH,OAAR,GAAkBA,OAAlB;AACAhH,OAAO,CAACyH,KAAR,GAAgBA,KAAhB;AACAzH,OAAO,CAACmJ,KAAR,GAAgBA,KAAhB"},"metadata":{},"sourceType":"module"}