{"ast":null,"code":"import { useRef, useEffect } from 'react';\nfunction useWindowEvent(type, listener, options) {\n  var listenerRef = useRef(listener);\n  listenerRef.current = listener;\n  useEffect(function () {\n    function handler(event) {\n      listenerRef.current.call(window, event);\n    }\n    window.addEventListener(type, handler, options);\n    return function () {\n      return window.removeEventListener(type, handler, options);\n    };\n  }, [type, options]);\n}\nexport { useWindowEvent };","map":{"version":3,"names":["useWindowEvent","type","listener","options","listenerRef","useRef","current","useEffect","handler","event","call","window","addEventListener","removeEventListener"],"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/node_modules/@headlessui/react/src/hooks/use-window-event.ts"],"sourcesContent":["import { useEffect, useRef } from 'react'\n\nexport function useWindowEvent<TType extends keyof WindowEventMap>(\n  type: TType,\n  listener: (this: Window, ev: WindowEventMap[TType]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  let listenerRef = useRef(listener)\n  listenerRef.current = listener\n\n  useEffect(() => {\n    function handler(event: WindowEventMap[TType]) {\n      listenerRef.current.call(window, event)\n    }\n\n    window.addEventListener(type, handler, options)\n    return () => window.removeEventListener(type, handler, options)\n  }, [type, options])\n}\n"],"mappings":";SAEgBA,eACdC,IAAA,EACAC,QAAA,EACAC,OAAA;EAEA,IAAIC,WAAW,GAAGC,MAAM,CAACH,QAAD,CAAxB;EACAE,WAAW,CAACE,OAAZ,GAAsBJ,QAAtB;EAEAK,SAAS,CAAC;IACR,SAASC,OAATA,CAAiBC,KAAjB;MACEL,WAAW,CAACE,OAAZ,CAAoBI,IAApB,CAAyBC,MAAzB,EAAiCF,KAAjC;IACD;IAEDE,MAAM,CAACC,gBAAP,CAAwBX,IAAxB,EAA8BO,OAA9B,EAAuCL,OAAvC;IACA,OAAO;MAAA,OAAMQ,MAAM,CAACE,mBAAP,CAA2BZ,IAA3B,EAAiCO,OAAjC,EAA0CL,OAA1C,CAAN;IAAA,CAAP;EACD,CAPQ,EAON,CAACF,IAAD,EAAOE,OAAP,CAPM,CAAT;AAQD"},"metadata":{},"sourceType":"module"}