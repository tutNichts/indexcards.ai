{"ast":null,"code":"var _jsxFileName = \"/Users/flok/Documents/Check/indexcards.ai/frontend/src/CreateSetModal.js\",\n    _s = $RefreshSig$();\n\nimport { Dialog, Transition } from \"@headlessui/react\";\nimport { Fragment, useRef } from \"react\";\nimport { array, object, string } from \"yup\";\nimport { storedSets } from \"./Store\";\nimport { Form, Formik, Field } from \"formik\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateSetModal(_ref) {\n  _s();\n\n  let {\n    isOpen,\n    onClose,\n    addSet\n  } = _ref;\n  const titleInputRef = useRef();\n  const tagsInputRef = useRef();\n  const [uploadFile, setUploadFile] = useState(false);\n  const validationSchema = object({\n    title: string().required(\"Bitte gib einen Titel fÃ¼r das Set an!\"),\n    tags: array().of(string()).min(3, \"Please enter at least 3 keywords!\")\n  });\n  return /*#__PURE__*/_jsxDEV(Transition, {\n    appear: true,\n    show: isOpen,\n    as: Fragment,\n    children: /*#__PURE__*/_jsxDEV(Dialog, {\n      initialFocus: titleInputRef,\n      onClose: onClose,\n      className: \"fixed z-50 inset-0 overflow-y-auto\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"min-h-screen px-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(Transition.Child, {\n          as: Fragment,\n          enter: \"ease-out duration-300\",\n          enterFrom: \"opacity-0 scale-95\",\n          enterTo: \"opacity-100 scale-100\",\n          leave: \"ease-in duration-200\",\n          leaveFrom: \"opacity-100 scale-100\",\n          leaveTo: \"opacity-0 scale-95\",\n          children: /*#__PURE__*/_jsxDEV(Dialog.Overlay, {\n            className: \"fixed inset-0\",\n            style: {\n              backgroundColor: \"rgba(0,0,0,0.3)\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            title: \"\",\n            tags: []\n          },\n          validationSchema: validationSchema,\n          onSubmit: values => {\n            addSet(validationSchema.cast(values)).then(() => {\n              onClose();\n            });\n          },\n          validateOnBlur: false,\n          validateOnChange: false,\n          children: _ref2 => {\n            let {\n              errors,\n              values: {\n                tags,\n                title\n              },\n              setFieldValue,\n              setValues\n            } = _ref2;\n            const setProposals = title.length < 3 ? [] : storedSets.filter(_ref3 => {\n              let {\n                topic\n              } = _ref3;\n              return topic.toLowerCase().includes(title.toLowerCase()) && topic.length !== title.length;\n            });\n            return /*#__PURE__*/_jsxDEV(Transition.Child, {\n              as: Fragment,\n              enter: \"ease-out duration-300\",\n              enterFrom: \"opacity-0 scale-95\",\n              enterTo: \"opacity-100 scale-100\",\n              leave: \"ease-in duration-200\",\n              leaveFrom: \"opacity-100 scale-100\",\n              leaveTo: \"opacity-0 scale-95\",\n              children: /*#__PURE__*/_jsxDEV(Form, {\n                className: \"inline-block w-full max-w-md my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg\",\n                children: [/*#__PURE__*/_jsxDEV(Dialog.Title, {\n                  as: \"h3\",\n                  className: \"text-lg font-medium leading-6 text-gray-600 pt-6 px-6 pb-2\",\n                  children: \"Create Index Card Set\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"px-6 py-5 flex flex-col\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mb-4\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"block\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mb-1 font-medium text-base text-gray-500\",\n                        children: \"Title\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 86,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(Field, {\n                        ref: titleInputRef,\n                        className: \"rounded focus:outline-0 text-gray-700 border border-gray-200 p-2 w-full\",\n                        type: \"text\",\n                        placeholder: \"Networking\",\n                        name: \"title\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 89,\n                        columnNumber: 27\n                      }, this), errors.title && /*#__PURE__*/_jsxDEV(\"p\", {\n                        className: \"mt-1 text-xs text-red-500 font-medium\",\n                        children: errors.title\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 97,\n                        columnNumber: 29\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 85,\n                      columnNumber: 25\n                    }, this), setProposals.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex flex-wrap mt-2 border-2 border-dashed border-gray-200 rounded p-2\",\n                      children: setProposals.map(_ref4 => {\n                        let {\n                          topic,\n                          tags: proposalTags\n                        } = _ref4;\n                        return /*#__PURE__*/_jsxDEV(\"button\", {\n                          className: \"bg-gray-300 text-gray-600 text-xs font-medium rounded-full px-2 py-1 m-1\",\n                          onClick: () => {\n                            setValues(values => ({\n                              tags: [...new Set([...proposalTags, ...values.tags])],\n                              title: topic\n                            }));\n                            tagsInputRef.current.focus();\n                          },\n                          children: topic\n                        }, topic, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 107,\n                          columnNumber: 33\n                        }, this);\n                      })\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 104,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 84,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"mb-4\",\n                    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                      className: \"block\",\n                      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                        className: \"mb-1 font-medium text-base text-gray-500\",\n                        children: \"Tags\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 133,\n                        columnNumber: 27\n                      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                        ref: tagsInputRef,\n                        className: \"rounded focus:outline-0 text-gray-700 border border-gray-200 p-2 w-full\",\n                        type: \"text\",\n                        placeholder: \"Press Enter\",\n                        onKeyDown: event => {\n                          if (event.target.value.length < 3) {\n                            return;\n                          }\n\n                          if (event.key === \"Enter\") {\n                            event.preventDefault();\n                            const inputValue = event.target.value;\n                            setValues(values => ({ ...values,\n                              tags: [...new Set([...values.tags, inputValue])]\n                            }));\n                            event.target.value = \"\";\n                          }\n                        }\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 136,\n                        columnNumber: 27\n                      }, this)]\n                    }, void 0, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 132,\n                      columnNumber: 25\n                    }, this), errors.tags && /*#__PURE__*/_jsxDEV(\"p\", {\n                      className: \"mt-1 text-xs text-red-500 font-medium\",\n                      children: errors.tags\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 162,\n                      columnNumber: 27\n                    }, this), tags.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                      className: \"flex flex-wrap mt-2 border-2 border-dashed border-gray-200 rounded p-2\",\n                      children: tags.map(tag => /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"bg-gray-300 text-gray-600 text-xs font-medium rounded-full px-2 py-1 m-1\",\n                        onClick: () => {\n                          setFieldValue(\"tags\", tags.filter(t => t !== tag));\n                        },\n                        children: tag\n                      }, tag, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 170,\n                        columnNumber: 31\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 168,\n                      columnNumber: 27\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 131,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    children: /*#__PURE__*/_jsxDEV(\"button\", {\n                      type: \"button\",\n                      onClick: () => {// onClose();\n                      },\n                      className: \"font-medium text-white bg-indigo-500 shadow text-sm rounded-lg py-2 px-3\",\n                      children: \"Upload Lecture Notes\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 188,\n                      columnNumber: 25\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 187,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"px-6 py-3 bg-gray-100 flex items-center justify-between\",\n                  children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"button\",\n                    onClick: () => {\n                      onClose();\n                    },\n                    className: \"font-medium text-base text-gray-400\",\n                    children: \"Close\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 200,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    className: \"font-medium text-white bg-indigo-500 shadow text-sm rounded-lg py-2 px-3\",\n                    children: \"Save\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 209,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 17\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateSetModal, \"+ImCTuNpVa6TUf9qlqAaYMKeP1o=\");\n\n_c = CreateSetModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateSetModal\");","map":{"version":3,"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/src/CreateSetModal.js"],"names":["Dialog","Transition","Fragment","useRef","array","object","string","storedSets","Form","Formik","Field","CreateSetModal","isOpen","onClose","addSet","titleInputRef","tagsInputRef","uploadFile","setUploadFile","useState","validationSchema","title","required","tags","of","min","backgroundColor","values","cast","then","errors","setFieldValue","setValues","setProposals","length","filter","topic","toLowerCase","includes","map","proposalTags","Set","current","focus","event","target","value","key","preventDefault","inputValue","tag","t"],"mappings":"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","sourcesContent":["import { Dialog, Transition } from \"@headlessui/react\";\nimport { Fragment, useRef } from \"react\";\nimport { array, object, string } from \"yup\";\nimport { storedSets } from \"./Store\";\nimport { Form, Formik, Field } from \"formik\";\n\nexport default function CreateSetModal({ isOpen, onClose, addSet }) {\n  const titleInputRef = useRef();\n  const tagsInputRef = useRef();\n\n  const [uploadFile, setUploadFile] = useState(false);\n\n  const validationSchema = object({\n    title: string().required(\"Bitte gib einen Titel fÃ¼r das Set an!\"),\n    tags: array().of(string()).min(3, \"Please enter at least 3 keywords!\"),\n  });\n\n  return (\n    <Transition appear show={isOpen} as={Fragment}>\n      <Dialog\n        initialFocus={titleInputRef}\n        onClose={onClose}\n        className=\"fixed z-50 inset-0 overflow-y-auto\"\n      >\n        <div className=\"min-h-screen px-4 text-center\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 scale-95\"\n            enterTo=\"opacity-100 scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 scale-100\"\n            leaveTo=\"opacity-0 scale-95\"\n          >\n            <Dialog.Overlay\n              className=\"fixed inset-0\"\n              style={{ backgroundColor: \"rgba(0,0,0,0.3)\" }}\n            />\n          </Transition.Child>\n          <Formik\n            initialValues={{ title: \"\", tags: [] }}\n            validationSchema={validationSchema}\n            onSubmit={(values) => {\n              addSet(validationSchema.cast(values)).then(() => {\n                onClose();\n              });\n            }}\n            validateOnBlur={false}\n            validateOnChange={false}\n          >\n            {({\n              errors,\n              values: { tags, title },\n              setFieldValue,\n              setValues,\n            }) => {\n              const setProposals =\n                title.length < 3\n                  ? []\n                  : storedSets.filter(\n                      ({ topic }) =>\n                        topic.toLowerCase().includes(title.toLowerCase()) &&\n                        topic.length !== title.length\n                    );\n\n              return (\n                <Transition.Child\n                  as={Fragment}\n                  enter=\"ease-out duration-300\"\n                  enterFrom=\"opacity-0 scale-95\"\n                  enterTo=\"opacity-100 scale-100\"\n                  leave=\"ease-in duration-200\"\n                  leaveFrom=\"opacity-100 scale-100\"\n                  leaveTo=\"opacity-0 scale-95\"\n                >\n                  <Form className=\"inline-block w-full max-w-md my-8 overflow-hidden text-left align-middle transition-all transform bg-white shadow-xl rounded-lg\">\n                    <Dialog.Title\n                      as=\"h3\"\n                      className=\"text-lg font-medium leading-6 text-gray-600 pt-6 px-6 pb-2\"\n                    >\n                      Create Index Card Set\n                    </Dialog.Title>\n                    <div className=\"px-6 py-5 flex flex-col\">\n                      <div className=\"mb-4\">\n                        <label className=\"block\">\n                          <div className=\"mb-1 font-medium text-base text-gray-500\">\n                            Title\n                          </div>\n                          <Field\n                            ref={titleInputRef}\n                            className=\"rounded focus:outline-0 text-gray-700 border border-gray-200 p-2 w-full\"\n                            type=\"text\"\n                            placeholder=\"Networking\"\n                            name=\"title\"\n                          />\n                          {errors.title && (\n                            <p className=\"mt-1 text-xs text-red-500 font-medium\">\n                              {errors.title}\n                            </p>\n                          )}\n                        </label>\n\n                        {setProposals.length > 0 && (\n                          <div className=\"flex flex-wrap mt-2 border-2 border-dashed border-gray-200 rounded p-2\">\n                            {setProposals.map(\n                              ({ topic, tags: proposalTags }) => (\n                                <button\n                                  key={topic}\n                                  className=\"bg-gray-300 text-gray-600 text-xs font-medium rounded-full px-2 py-1 m-1\"\n                                  onClick={() => {\n                                    setValues((values) => ({\n                                      tags: [\n                                        ...new Set([\n                                          ...proposalTags,\n                                          ...values.tags,\n                                        ]),\n                                      ],\n                                      title: topic,\n                                    }));\n                                    tagsInputRef.current.focus();\n                                  }}\n                                >\n                                  {topic}\n                                </button>\n                              )\n                            )}\n                          </div>\n                        )}\n                      </div>\n\n                      <div className=\"mb-4\">\n                        <label className=\"block\">\n                          <div className=\"mb-1 font-medium text-base text-gray-500\">\n                            Tags\n                          </div>\n                          <input\n                            ref={tagsInputRef}\n                            className=\"rounded focus:outline-0 text-gray-700 border border-gray-200 p-2 w-full\"\n                            type=\"text\"\n                            placeholder=\"Press Enter\"\n                            onKeyDown={(event) => {\n                              if (event.target.value.length < 3) {\n                                return;\n                              }\n\n                              if (event.key === \"Enter\") {\n                                event.preventDefault();\n\n                                const inputValue = event.target.value;\n                                setValues((values) => ({\n                                  ...values,\n                                  tags: [\n                                    ...new Set([...values.tags, inputValue]),\n                                  ],\n                                }));\n                                event.target.value = \"\";\n                              }\n                            }}\n                          />\n                        </label>\n                        {errors.tags && (\n                          <p className=\"mt-1 text-xs text-red-500 font-medium\">\n                            {errors.tags}\n                          </p>\n                        )}\n\n                        {tags.length > 0 && (\n                          <div className=\"flex flex-wrap mt-2 border-2 border-dashed border-gray-200 rounded p-2\">\n                            {tags.map((tag) => (\n                              <button\n                                key={tag}\n                                className=\"bg-gray-300 text-gray-600 text-xs font-medium rounded-full px-2 py-1 m-1\"\n                                onClick={() => {\n                                  setFieldValue(\n                                    \"tags\",\n                                    tags.filter((t) => t !== tag)\n                                  );\n                                }}\n                              >\n                                {tag}\n                              </button>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n\n                      <div>\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            // onClose();\n                          }}\n                          className=\"font-medium text-white bg-indigo-500 shadow text-sm rounded-lg py-2 px-3\"\n                        >\n                          Upload Lecture Notes\n                        </button>\n                      </div>\n                    </div>\n                    <div className=\"px-6 py-3 bg-gray-100 flex items-center justify-between\">\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          onClose();\n                        }}\n                        className=\"font-medium text-base text-gray-400\"\n                      >\n                        Close\n                      </button>\n                      <button\n                        type=\"submit\"\n                        className=\"font-medium text-white bg-indigo-500 shadow text-sm rounded-lg py-2 px-3\"\n                      >\n                        Save\n                      </button>\n                    </div>\n                  </Form>\n                </Transition.Child>\n              );\n            }}\n          </Formik>\n        </div>\n      </Dialog>\n    </Transition>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}