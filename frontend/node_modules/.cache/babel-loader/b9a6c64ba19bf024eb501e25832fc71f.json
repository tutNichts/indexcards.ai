{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\nfunction useTreeWalker(_ref) {\n  var container = _ref.container,\n    accept = _ref.accept,\n    walk = _ref.walk,\n    _ref$enabled = _ref.enabled,\n    enabled = _ref$enabled === void 0 ? true : _ref$enabled;\n  var acceptRef = useRef(accept);\n  var walkRef = useRef(walk);\n  useEffect(function () {\n    acceptRef.current = accept;\n    walkRef.current = walk;\n  }, [accept, walk]);\n  useIsoMorphicEffect(function () {\n    if (!container) return;\n    if (!enabled) return;\n    var accept = acceptRef.current;\n    var walk = walkRef.current;\n    var acceptNode = Object.assign(function (node) {\n      return accept(node);\n    }, {\n      acceptNode: accept\n    });\n    var walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false);\n    while (walker.nextNode()) {\n      walk(walker.currentNode);\n    }\n  }, [container, enabled, acceptRef, walkRef]);\n}\nexport { useTreeWalker };","map":{"version":3,"names":["useTreeWalker","_ref","container","accept","walk","enabled","_ref$enabled","acceptRef","useRef","walkRef","useEffect","current","useIsoMorphicEffect","acceptNode","Object","assign","node","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","currentNode"],"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/node_modules/@headlessui/react/src/hooks/use-tree-walker.ts"],"sourcesContent":["import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n"],"mappings":";;SAUgBA,cAAAC,IAAA;MACdC,SAAA,GAAAD,IAAA,CAAAC,SAAA;IACAC,MAAA,GAAAF,IAAA,CAAAE,MAAA;IACAC,IAAA,GAAAH,IAAA,CAAAG,IAAA;wBACAC,OAAA;IAAAA,OAAA,GAAAC,YAAA,cAAU,OAAAA,YAAA;EAOV,IAAIC,SAAS,GAAGC,MAAM,CAACL,MAAD,CAAtB;EACA,IAAIM,OAAO,GAAGD,MAAM,CAACJ,IAAD,CAApB;EAEAM,SAAS,CAAC;IACRH,SAAS,CAACI,OAAV,GAAoBR,MAApB;IACAM,OAAO,CAACE,OAAR,GAAkBP,IAAlB;EACD,CAHQ,EAGN,CAACD,MAAD,EAASC,IAAT,CAHM,CAAT;EAKAQ,mBAAmB,CAAC;IAClB,IAAI,CAACV,SAAL,EAAgB;IAChB,IAAI,CAACG,OAAL,EAAc;IAEd,IAAIF,MAAM,GAAGI,SAAS,CAACI,OAAvB;IACA,IAAIP,IAAI,GAAGK,OAAO,CAACE,OAAnB;IAEA,IAAIE,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,UAACC,IAAD;MAAA,OAAuBb,MAAM,CAACa,IAAD,CAA7B;IAAA,CAAd,EAAmD;MAAEH,UAAU,EAAEV;IAAd,CAAnD,CAAjB;IACA,IAAIc,MAAM,GAAGC,QAAQ,CAACC,gBAAT,CAA0BjB,SAA1B,EAAqCkB,UAAU,CAACC,YAAhD,EAA8DR,UAA9D,EAA0E,KAA1E,CAAb;IAEA,OAAOI,MAAM,CAACK,QAAP,EAAP;MAA0BlB,IAAI,CAACa,MAAM,CAACM,WAAR,CAAJ;IAA1B;EACD,CAXkB,EAWhB,CAACrB,SAAD,EAAYG,OAAZ,EAAqBE,SAArB,EAAgCE,OAAhC,CAXgB,CAAnB;AAYD"},"metadata":{},"sourceType":"module"}