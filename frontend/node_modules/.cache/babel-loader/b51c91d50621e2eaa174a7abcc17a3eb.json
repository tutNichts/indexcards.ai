{"ast":null,"code":"import React, { useContext, createContext } from 'react';\nvar Context = /*#__PURE__*/createContext(null);\nContext.displayName = 'OpenClosedContext';\nvar State;\n(function (State) {\n  State[State[\"Open\"] = 0] = \"Open\";\n  State[State[\"Closed\"] = 1] = \"Closed\";\n})(State || (State = {}));\nfunction useOpenClosed() {\n  return useContext(Context);\n}\nfunction OpenClosedProvider(_ref) {\n  var value = _ref.value,\n    children = _ref.children;\n  return React.createElement(Context.Provider, {\n    value: value\n  }, children);\n}\nexport { OpenClosedProvider, State, useOpenClosed };","map":{"version":3,"names":["Context","createContext","displayName","State","useOpenClosed","useContext","OpenClosedProvider","_ref","value","children","React","createElement","Provider"],"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/node_modules/@headlessui/react/src/internal/open-closed.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n"],"mappings":";AASA,IAAIA,OAAO,gBAAGC,aAAa,CAAe,IAAf,CAA3B;AACAD,OAAO,CAACE,WAAR,GAAsB,mBAAtB;IAEYC,KAAA;AAAZ,WAAYA,KAAA;EACVA,KAAA,CAAAA,KAAA;EACAA,KAAA,CAAAA,KAAA;AACD,CAHD,EAAYA,KAAK,KAALA,KAAK,MAAjB;SAKgBC,cAAA;EACd,OAAOC,UAAU,CAACL,OAAD,CAAjB;AACD;SAOeM,mBAAAC,IAAA;MAAqBC,KAAA,GAAAD,IAAA,CAAAC,KAAA;IAAOC,QAAA,GAAAF,IAAA,CAAAE,QAAA;EAC1C,OAAOC,KAAA,CAAAC,aAAA,CAACX,OAAO,CAACY,QAAT;IAAkBJ,KAAK,EAAEA;GAAzB,EAAiCC,QAAjC,CAAP;AACD"},"metadata":{},"sourceType":"module"}