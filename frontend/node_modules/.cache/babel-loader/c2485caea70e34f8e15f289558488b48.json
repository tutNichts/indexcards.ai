{"ast":null,"code":"import { useState, useRef } from 'react';\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect.esm.js';\nfunction useComputed(cb, dependencies) {\n  var _useState = useState(cb),\n    value = _useState[0],\n    setValue = _useState[1];\n  var cbRef = useRef(cb);\n  useIsoMorphicEffect(function () {\n    cbRef.current = cb;\n  }, [cb]);\n  useIsoMorphicEffect(function () {\n    return setValue(cbRef.current);\n  }, [cbRef, setValue].concat(dependencies));\n  return value;\n}\nexport { useComputed };","map":{"version":3,"names":["useComputed","cb","dependencies","useState","value","_useState","setValue","cbRef","useRef","useIsoMorphicEffect","current","concat"],"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/node_modules/@headlessui/react/src/hooks/use-computed.ts"],"sourcesContent":["import { useState, useRef } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nexport function useComputed<T>(cb: () => T, dependencies: React.DependencyList) {\n  let [value, setValue] = useState(cb)\n  let cbRef = useRef(cb)\n  useIsoMorphicEffect(() => {\n    cbRef.current = cb\n  }, [cb])\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies])\n  return value\n}\n"],"mappings":";;SAGgBA,YAAeC,EAAA,EAAaC,YAAA;kBAClBC,QAAQ,CAACF,EAAD;IAA3BG,KAAA,GAAAC,SAAA;IAAOC,QAAA,GAAAD,SAAA;EACZ,IAAIE,KAAK,GAAGC,MAAM,CAACP,EAAD,CAAlB;EACAQ,mBAAmB,CAAC;IAClBF,KAAK,CAACG,OAAN,GAAgBT,EAAhB;EACD,CAFkB,EAEhB,CAACA,EAAD,CAFgB,CAAnB;EAGAQ,mBAAmB,CAAC;IAAA,OAAMH,QAAQ,CAACC,KAAK,CAACG,OAAP,CAAd;EAAA,CAAD,GAAiCH,KAAjC,EAAwCD,QAAxC,EAAAK,MAAA,CAAqDT,YAArD,EAAnB;EACA,OAAOE,KAAP;AACD"},"metadata":{},"sourceType":"module"}