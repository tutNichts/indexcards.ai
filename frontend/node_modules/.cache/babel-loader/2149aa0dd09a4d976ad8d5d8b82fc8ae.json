{"ast":null,"code":"import { extends as _extends, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose } from '../../_virtual/_rollupPluginBabelHelpers.js';\nimport React, { useReducer, useEffect, useCallback, useMemo, createContext, useRef, useContext, Fragment } from 'react';\nimport { match } from '../../utils/match.esm.js';\nimport { render, forwardRefWithAs, Features } from '../../utils/render.esm.js';\nimport { useSyncRefs } from '../../hooks/use-sync-refs.esm.js';\nimport { Keys } from '../keyboard.esm.js';\nimport { isDisabledReactIssue7711 } from '../../utils/bugs.esm.js';\nimport { useId } from '../../hooks/use-id.esm.js';\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed.esm.js';\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type.esm.js';\nvar _reducers;\nvar DisclosureStates;\n(function (DisclosureStates) {\n  DisclosureStates[DisclosureStates[\"Open\"] = 0] = \"Open\";\n  DisclosureStates[DisclosureStates[\"Closed\"] = 1] = \"Closed\";\n})(DisclosureStates || (DisclosureStates = {}));\nvar ActionTypes;\n(function (ActionTypes) {\n  ActionTypes[ActionTypes[\"ToggleDisclosure\"] = 0] = \"ToggleDisclosure\";\n  ActionTypes[ActionTypes[\"CloseDisclosure\"] = 1] = \"CloseDisclosure\";\n  ActionTypes[ActionTypes[\"SetButtonId\"] = 2] = \"SetButtonId\";\n  ActionTypes[ActionTypes[\"SetPanelId\"] = 3] = \"SetPanelId\";\n  ActionTypes[ActionTypes[\"LinkPanel\"] = 4] = \"LinkPanel\";\n  ActionTypes[ActionTypes[\"UnlinkPanel\"] = 5] = \"UnlinkPanel\";\n})(ActionTypes || (ActionTypes = {}));\nvar reducers = (_reducers = {}, _reducers[ActionTypes.ToggleDisclosure] = function (state) {\n  var _match;\n  return _extends({}, state, {\n    disclosureState: match(state.disclosureState, (_match = {}, _match[DisclosureStates.Open] = DisclosureStates.Closed, _match[DisclosureStates.Closed] = DisclosureStates.Open, _match))\n  });\n}, _reducers[ActionTypes.CloseDisclosure] = function (state) {\n  if (state.disclosureState === DisclosureStates.Closed) return state;\n  return _extends({}, state, {\n    disclosureState: DisclosureStates.Closed\n  });\n}, _reducers[ActionTypes.LinkPanel] = function (state) {\n  if (state.linkedPanel === true) return state;\n  return _extends({}, state, {\n    linkedPanel: true\n  });\n}, _reducers[ActionTypes.UnlinkPanel] = function (state) {\n  if (state.linkedPanel === false) return state;\n  return _extends({}, state, {\n    linkedPanel: false\n  });\n}, _reducers[ActionTypes.SetButtonId] = function (state, action) {\n  if (state.buttonId === action.buttonId) return state;\n  return _extends({}, state, {\n    buttonId: action.buttonId\n  });\n}, _reducers[ActionTypes.SetPanelId] = function (state, action) {\n  if (state.panelId === action.panelId) return state;\n  return _extends({}, state, {\n    panelId: action.panelId\n  });\n}, _reducers);\nvar DisclosureContext = /*#__PURE__*/createContext(null);\nDisclosureContext.displayName = 'DisclosureContext';\nfunction useDisclosureContext(component) {\n  var context = useContext(DisclosureContext);\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext);\n    throw err;\n  }\n  return context;\n}\nvar DisclosureAPIContext = /*#__PURE__*/createContext(null);\nDisclosureAPIContext.displayName = 'DisclosureAPIContext';\nfunction useDisclosureAPIContext(component) {\n  var context = useContext(DisclosureAPIContext);\n  if (context === null) {\n    var err = new Error(\"<\" + component + \" /> is missing a parent <\" + Disclosure.name + \" /> component.\");\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext);\n    throw err;\n  }\n  return context;\n}\nvar DisclosurePanelContext = /*#__PURE__*/createContext(null);\nDisclosurePanelContext.displayName = 'DisclosurePanelContext';\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext);\n}\nfunction stateReducer(state, action) {\n  return match(action.type, reducers, state, action);\n} // ---\n\nvar DEFAULT_DISCLOSURE_TAG = Fragment;\nfunction Disclosure(props) {\n  var _match2;\n  var _props$defaultOpen = props.defaultOpen,\n    defaultOpen = _props$defaultOpen === void 0 ? false : _props$defaultOpen,\n    passthroughProps = _objectWithoutPropertiesLoose(props, [\"defaultOpen\"]);\n  var buttonId = \"headlessui-disclosure-button-\" + useId();\n  var panelId = \"headlessui-disclosure-panel-\" + useId();\n  var reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId: buttonId,\n    panelId: panelId\n  });\n  var disclosureState = reducerBag[0].disclosureState,\n    dispatch = reducerBag[1];\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetButtonId,\n      buttonId: buttonId\n    });\n  }, [buttonId, dispatch]);\n  useEffect(function () {\n    return dispatch({\n      type: ActionTypes.SetPanelId,\n      panelId: panelId\n    });\n  }, [panelId, dispatch]);\n  var close = useCallback(function (focusableElement) {\n    dispatch({\n      type: ActionTypes.CloseDisclosure\n    });\n    var restoreElement = function () {\n      if (!focusableElement) return document.getElementById(buttonId);\n      if (focusableElement instanceof HTMLElement) return focusableElement;\n      if (focusableElement.current instanceof HTMLElement) return focusableElement.current;\n      return document.getElementById(buttonId);\n    }();\n    restoreElement == null ? void 0 : restoreElement.focus();\n  }, [dispatch, buttonId]);\n  var api = useMemo(function () {\n    return {\n      close: close\n    };\n  }, [close]);\n  var slot = useMemo(function () {\n    return {\n      open: disclosureState === DisclosureStates.Open,\n      close: close\n    };\n  }, [disclosureState, close]);\n  return React.createElement(DisclosureContext.Provider, {\n    value: reducerBag\n  }, React.createElement(DisclosureAPIContext.Provider, {\n    value: api\n  }, React.createElement(OpenClosedProvider, {\n    value: match(disclosureState, (_match2 = {}, _match2[DisclosureStates.Open] = State.Open, _match2[DisclosureStates.Closed] = State.Closed, _match2))\n  }, render({\n    props: passthroughProps,\n    slot: slot,\n    defaultTag: DEFAULT_DISCLOSURE_TAG,\n    name: 'Disclosure'\n  }))));\n} // ---\n\nvar DEFAULT_BUTTON_TAG = 'button';\nvar Button = /*#__PURE__*/forwardRefWithAs(function Button(props, ref) {\n  var _useDisclosureContext = useDisclosureContext([Disclosure.name, Button.name].join('.')),\n    state = _useDisclosureContext[0],\n    dispatch = _useDisclosureContext[1];\n  var internalButtonRef = useRef(null);\n  var buttonRef = useSyncRefs(internalButtonRef, ref);\n  var panelContext = useDisclosurePanelContext();\n  var isWithinPanel = panelContext === null ? false : panelContext === state.panelId;\n  var handleKeyDown = useCallback(function (event) {\n    var _document$getElementB;\n    if (isWithinPanel) {\n      if (state.disclosureState === DisclosureStates.Closed) return;\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ToggleDisclosure\n          });\n          (_document$getElementB = document.getElementById(state.buttonId)) == null ? void 0 : _document$getElementB.focus();\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault();\n          event.stopPropagation();\n          dispatch({\n            type: ActionTypes.ToggleDisclosure\n          });\n          break;\n      }\n    }\n  }, [dispatch, isWithinPanel, state.disclosureState]);\n  var handleKeyUp = useCallback(function (event) {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault();\n        break;\n    }\n  }, []);\n  var handleClick = useCallback(function (event) {\n    if (isDisabledReactIssue7711(event.currentTarget)) return;\n    if (props.disabled) return;\n    if (isWithinPanel) {\n      var _document$getElementB2;\n      dispatch({\n        type: ActionTypes.ToggleDisclosure\n      });\n      (_document$getElementB2 = document.getElementById(state.buttonId)) == null ? void 0 : _document$getElementB2.focus();\n    } else {\n      dispatch({\n        type: ActionTypes.ToggleDisclosure\n      });\n    }\n  }, [dispatch, props.disabled, state.buttonId, isWithinPanel]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open\n    };\n  }, [state]);\n  var type = useResolveButtonType(props, internalButtonRef);\n  var passthroughProps = props;\n  var propsWeControl = isWithinPanel ? {\n    ref: buttonRef,\n    type: type,\n    onKeyDown: handleKeyDown,\n    onClick: handleClick\n  } : {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: type,\n    'aria-expanded': props.disabled ? undefined : state.disclosureState === DisclosureStates.Open,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick\n  };\n  return render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button'\n  });\n}); // ---\n\nvar DEFAULT_PANEL_TAG = 'div';\nvar PanelRenderFeatures = Features.RenderStrategy | Features.Static;\nvar Panel = /*#__PURE__*/forwardRefWithAs(function Panel(props, ref) {\n  var _useDisclosureContext2 = useDisclosureContext([Disclosure.name, Panel.name].join('.')),\n    state = _useDisclosureContext2[0],\n    dispatch = _useDisclosureContext2[1];\n  var _useDisclosureAPICont = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.')),\n    close = _useDisclosureAPICont.close;\n  var panelRef = useSyncRefs(ref, function () {\n    if (state.linkedPanel) return;\n    dispatch({\n      type: ActionTypes.LinkPanel\n    });\n  });\n  var usesOpenClosedState = useOpenClosed();\n  var visible = function () {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open;\n    }\n    return state.disclosureState === DisclosureStates.Open;\n  }(); // Unlink on \"unmount\" myself\n\n  useEffect(function () {\n    return function () {\n      return dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    };\n  }, [dispatch]); // Unlink on \"unmount\" children\n\n  useEffect(function () {\n    var _props$unmount;\n    if (state.disclosureState === DisclosureStates.Closed && ((_props$unmount = props.unmount) != null ? _props$unmount : true)) {\n      dispatch({\n        type: ActionTypes.UnlinkPanel\n      });\n    }\n  }, [state.disclosureState, props.unmount, dispatch]);\n  var slot = useMemo(function () {\n    return {\n      open: state.disclosureState === DisclosureStates.Open,\n      close: close\n    };\n  }, [state, close]);\n  var propsWeControl = {\n    ref: panelRef,\n    id: state.panelId\n  };\n  var passthroughProps = props;\n  return React.createElement(DisclosurePanelContext.Provider, {\n    value: state.panelId\n  }, render({\n    props: _extends({}, passthroughProps, propsWeControl),\n    slot: slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible: visible,\n    name: 'Disclosure.Panel'\n  }));\n}); // ---\n\nDisclosure.Button = Button;\nDisclosure.Panel = Panel;\nexport { Disclosure };","map":{"version":3,"names":["DisclosureStates","ActionTypes","reducers","_reducers","ToggleDisclosure","state","_match","_extends","disclosureState","match","Open","Closed","CloseDisclosure","LinkPanel","linkedPanel","UnlinkPanel","SetButtonId","action","buttonId","SetPanelId","panelId","DisclosureContext","createContext","displayName","useDisclosureContext","component","context","useContext","err","Error","Disclosure","name","captureStackTrace","DisclosureAPIContext","useDisclosureAPIContext","DisclosurePanelContext","useDisclosurePanelContext","stateReducer","type","DEFAULT_DISCLOSURE_TAG","Fragment","props","defaultOpen","_props$defaultOpen","passthroughProps","_objectWithoutPropertiesLoose","useId","reducerBag","useReducer","dispatch","useEffect","close","useCallback","focusableElement","restoreElement","document","getElementById","HTMLElement","current","focus","api","useMemo","slot","open","React","createElement","Provider","value","OpenClosedProvider","_match2","State","render","defaultTag","DEFAULT_BUTTON_TAG","Button","forwardRefWithAs","ref","join","_useDisclosureContext","internalButtonRef","useRef","buttonRef","useSyncRefs","panelContext","isWithinPanel","handleKeyDown","event","key","Keys","Space","Enter","preventDefault","stopPropagation","_document$getElementB","handleKeyUp","handleClick","isDisabledReactIssue7711","currentTarget","disabled","_document$getElementB2","useResolveButtonType","propsWeControl","onKeyDown","onClick","id","undefined","onKeyUp","DEFAULT_PANEL_TAG","PanelRenderFeatures","Features","RenderStrategy","Static","Panel","_useDisclosureContext2","_useDisclosureAPICont","panelRef","usesOpenClosedState","useOpenClosed","visible","_props$unmount","unmount","features"],"sources":["/Users/flok/Documents/Check/indexcards.ai/frontend/node_modules/@headlessui/react/src/components/disclosure/disclosure.tsx"],"sourcesContent":["// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n  MutableRefObject,\n  ContextType,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useResolveButtonType } from '../../hooks/use-resolve-button-type'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n  CloseDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.CloseDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.CloseDisclosure]: state => {\n    if (state.disclosureState === DisclosureStates.Closed) return state\n    return { ...state, disclosureState: DisclosureStates.Closed }\n  },\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosureAPIContext = createContext<{\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n} | null>(null)\nDisclosureAPIContext.displayName = 'DisclosureAPIContext'\n\nfunction useDisclosureAPIContext(component: string) {\n  let context = useContext(DisclosureAPIContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureAPIContext)\n    throw err\n  }\n  return context\n}\n\nlet DisclosurePanelContext = createContext<string | null>(null)\nDisclosurePanelContext.displayName = 'DisclosurePanelContext'\n\nfunction useDisclosurePanelContext() {\n  return useContext(DisclosurePanelContext)\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n  close(focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>): void\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let close = useCallback(\n    (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => {\n      dispatch({ type: ActionTypes.CloseDisclosure })\n\n      let restoreElement = (() => {\n        if (!focusableElement) return document.getElementById(buttonId)\n        if (focusableElement instanceof HTMLElement) return focusableElement\n        if (focusableElement.current instanceof HTMLElement) return focusableElement.current\n\n        return document.getElementById(buttonId)\n      })()\n\n      restoreElement?.focus()\n    },\n    [dispatch, buttonId]\n  )\n\n  let api = useMemo<ContextType<typeof DisclosureAPIContext>>(() => ({ close }), [close])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open, close }),\n    [disclosureState, close]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <DisclosureAPIContext.Provider value={api}>\n        <OpenClosedProvider\n          value={match(disclosureState, {\n            [DisclosureStates.Open]: State.Open,\n            [DisclosureStates.Closed]: State.Closed,\n          })}\n        >\n          {render({\n            props: passthroughProps,\n            slot,\n            defaultTag: DEFAULT_DISCLOSURE_TAG,\n            name: 'Disclosure',\n          })}\n        </OpenClosedProvider>\n      </DisclosureAPIContext.Provider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n  let buttonRef = useSyncRefs(internalButtonRef, ref)\n\n  let panelContext = useDisclosurePanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.disclosureState === DisclosureStates.Closed) return\n\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            document.getElementById(state.buttonId)?.focus()\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault()\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ToggleDisclosure })\n            break\n        }\n      }\n    },\n    [dispatch, isWithinPanel, state.disclosureState]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n        document.getElementById(state.buttonId)?.focus()\n      } else {\n        dispatch({ type: ActionTypes.ToggleDisclosure })\n      }\n    },\n    [dispatch, props.disabled, state.buttonId, isWithinPanel]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let type = useResolveButtonType(props, internalButtonRef)\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? { ref: buttonRef, type, onKeyDown: handleKeyDown, onClick: handleClick }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type,\n        'aria-expanded': props.disabled\n          ? undefined\n          : state.disclosureState === DisclosureStates.Open,\n        'aria-controls': state.linkedPanel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n  close: (focusableElement?: HTMLElement | MutableRefObject<HTMLElement | null>) => void\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let { close } = useDisclosureAPIContext([Disclosure.name, Panel.name].join('.'))\n\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open, close }),\n    [state, close]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return (\n    <DisclosurePanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Disclosure.Panel',\n      })}\n    </DisclosurePanelContext.Provider>\n  )\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}